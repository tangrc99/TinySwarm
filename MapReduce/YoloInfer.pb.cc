// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: YoloInfer.proto

#include "YoloInfer.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR MongoImageOidRange::MongoImageOidRange(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.min_oid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.max_oid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MongoImageOidRangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MongoImageOidRangeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MongoImageOidRangeDefaultTypeInternal() {}
  union {
    MongoImageOidRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MongoImageOidRangeDefaultTypeInternal _MongoImageOidRange_default_instance_;
PROTOBUF_CONSTEXPR YoloTestResult::YoloTestResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accuracy_)*/0
  , /*decltype(_impl_.precision_)*/0
  , /*decltype(_impl_.recall_)*/0
  , /*decltype(_impl_.ap_)*/0
  , /*decltype(_impl_.iou_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct YoloTestResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR YoloTestResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~YoloTestResultDefaultTypeInternal() {}
  union {
    YoloTestResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 YoloTestResultDefaultTypeInternal _YoloTestResult_default_instance_;
static ::_pb::Metadata file_level_metadata_YoloInfer_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_YoloInfer_2eproto = nullptr;
static const ::_pb::ServiceDescriptor* file_level_service_descriptors_YoloInfer_2eproto[1];

const uint32_t TableStruct_YoloInfer_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MongoImageOidRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MongoImageOidRange, _impl_.min_oid_),
  PROTOBUF_FIELD_OFFSET(::MongoImageOidRange, _impl_.max_oid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::YoloTestResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::YoloTestResult, _impl_.accuracy_),
  PROTOBUF_FIELD_OFFSET(::YoloTestResult, _impl_.precision_),
  PROTOBUF_FIELD_OFFSET(::YoloTestResult, _impl_.recall_),
  PROTOBUF_FIELD_OFFSET(::YoloTestResult, _impl_.ap_),
  PROTOBUF_FIELD_OFFSET(::YoloTestResult, _impl_.iou_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::MongoImageOidRange)},
  { 8, -1, -1, sizeof(::YoloTestResult)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_MongoImageOidRange_default_instance_._instance,
  &::_YoloTestResult_default_instance_._instance,
};

const char descriptor_table_protodef_YoloInfer_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017YoloInfer.proto\"6\n\022MongoImageOidRange\022"
  "\017\n\007min_oid\030\001 \001(\t\022\017\n\007max_oid\030\002 \001(\t\"^\n\016Yol"
  "oTestResult\022\020\n\010accuracy\030\001 \001(\005\022\021\n\tprecisi"
  "on\030\002 \001(\005\022\016\n\006recall\030\003 \001(\005\022\n\n\002AP\030\004 \001(\005\022\013\n\003"
  "IoU\030\005 \001(\0052\177\n\010YoloTest\0227\n\017testWithRoadSeg"
  "\022\023.MongoImageOidRange\032\017.YoloTestResult\022:"
  "\n\022testWithoutRoadSeg\022\023.MongoImageOidRang"
  "e\032\017.YoloTestResultB\003\200\001\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_YoloInfer_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_YoloInfer_2eproto = {
    false, false, 311, descriptor_table_protodef_YoloInfer_2eproto,
    "YoloInfer.proto",
    &descriptor_table_YoloInfer_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_YoloInfer_2eproto::offsets,
    file_level_metadata_YoloInfer_2eproto, file_level_enum_descriptors_YoloInfer_2eproto,
    file_level_service_descriptors_YoloInfer_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_YoloInfer_2eproto_getter() {
  return &descriptor_table_YoloInfer_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_YoloInfer_2eproto(&descriptor_table_YoloInfer_2eproto);

// ===================================================================

class MongoImageOidRange::_Internal {
 public:
};

MongoImageOidRange::MongoImageOidRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:MongoImageOidRange)
}
MongoImageOidRange::MongoImageOidRange(const MongoImageOidRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MongoImageOidRange* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.min_oid_){}
    , decltype(_impl_.max_oid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.min_oid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.min_oid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_min_oid().empty()) {
    _this->_impl_.min_oid_.Set(from._internal_min_oid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.max_oid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.max_oid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_max_oid().empty()) {
    _this->_impl_.max_oid_.Set(from._internal_max_oid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:MongoImageOidRange)
}

inline void MongoImageOidRange::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.min_oid_){}
    , decltype(_impl_.max_oid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.min_oid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.min_oid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.max_oid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.max_oid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MongoImageOidRange::~MongoImageOidRange() {
  // @@protoc_insertion_point(destructor:MongoImageOidRange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MongoImageOidRange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.min_oid_.Destroy();
  _impl_.max_oid_.Destroy();
}

void MongoImageOidRange::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MongoImageOidRange::Clear() {
// @@protoc_insertion_point(message_clear_start:MongoImageOidRange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.min_oid_.ClearToEmpty();
  _impl_.max_oid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MongoImageOidRange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string min_oid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_min_oid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "MongoImageOidRange.min_oid"));
        } else
          goto handle_unusual;
        continue;
      // string max_oid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_max_oid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "MongoImageOidRange.max_oid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MongoImageOidRange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MongoImageOidRange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string min_oid = 1;
  if (!this->_internal_min_oid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_min_oid().data(), static_cast<int>(this->_internal_min_oid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MongoImageOidRange.min_oid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_min_oid(), target);
  }

  // string max_oid = 2;
  if (!this->_internal_max_oid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_max_oid().data(), static_cast<int>(this->_internal_max_oid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MongoImageOidRange.max_oid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_max_oid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MongoImageOidRange)
  return target;
}

size_t MongoImageOidRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MongoImageOidRange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string min_oid = 1;
  if (!this->_internal_min_oid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_min_oid());
  }

  // string max_oid = 2;
  if (!this->_internal_max_oid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_max_oid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MongoImageOidRange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MongoImageOidRange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MongoImageOidRange::GetClassData() const { return &_class_data_; }


void MongoImageOidRange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MongoImageOidRange*>(&to_msg);
  auto& from = static_cast<const MongoImageOidRange&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MongoImageOidRange)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_min_oid().empty()) {
    _this->_internal_set_min_oid(from._internal_min_oid());
  }
  if (!from._internal_max_oid().empty()) {
    _this->_internal_set_max_oid(from._internal_max_oid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MongoImageOidRange::CopyFrom(const MongoImageOidRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MongoImageOidRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MongoImageOidRange::IsInitialized() const {
  return true;
}

void MongoImageOidRange::InternalSwap(MongoImageOidRange* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.min_oid_, lhs_arena,
      &other->_impl_.min_oid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.max_oid_, lhs_arena,
      &other->_impl_.max_oid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MongoImageOidRange::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_YoloInfer_2eproto_getter, &descriptor_table_YoloInfer_2eproto_once,
      file_level_metadata_YoloInfer_2eproto[0]);
}

// ===================================================================

class YoloTestResult::_Internal {
 public:
};

YoloTestResult::YoloTestResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:YoloTestResult)
}
YoloTestResult::YoloTestResult(const YoloTestResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  YoloTestResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accuracy_){}
    , decltype(_impl_.precision_){}
    , decltype(_impl_.recall_){}
    , decltype(_impl_.ap_){}
    , decltype(_impl_.iou_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.accuracy_, &from._impl_.accuracy_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.iou_) -
    reinterpret_cast<char*>(&_impl_.accuracy_)) + sizeof(_impl_.iou_));
  // @@protoc_insertion_point(copy_constructor:YoloTestResult)
}

inline void YoloTestResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.accuracy_){0}
    , decltype(_impl_.precision_){0}
    , decltype(_impl_.recall_){0}
    , decltype(_impl_.ap_){0}
    , decltype(_impl_.iou_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

YoloTestResult::~YoloTestResult() {
  // @@protoc_insertion_point(destructor:YoloTestResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void YoloTestResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void YoloTestResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void YoloTestResult::Clear() {
// @@protoc_insertion_point(message_clear_start:YoloTestResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.accuracy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.iou_) -
      reinterpret_cast<char*>(&_impl_.accuracy_)) + sizeof(_impl_.iou_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* YoloTestResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 accuracy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.accuracy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 precision = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.precision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 recall = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.recall_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 AP = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.ap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 IoU = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.iou_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* YoloTestResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:YoloTestResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 accuracy = 1;
  if (this->_internal_accuracy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_accuracy(), target);
  }

  // int32 precision = 2;
  if (this->_internal_precision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_precision(), target);
  }

  // int32 recall = 3;
  if (this->_internal_recall() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_recall(), target);
  }

  // int32 AP = 4;
  if (this->_internal_ap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_ap(), target);
  }

  // int32 IoU = 5;
  if (this->_internal_iou() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_iou(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:YoloTestResult)
  return target;
}

size_t YoloTestResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:YoloTestResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 accuracy = 1;
  if (this->_internal_accuracy() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_accuracy());
  }

  // int32 precision = 2;
  if (this->_internal_precision() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_precision());
  }

  // int32 recall = 3;
  if (this->_internal_recall() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_recall());
  }

  // int32 AP = 4;
  if (this->_internal_ap() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ap());
  }

  // int32 IoU = 5;
  if (this->_internal_iou() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_iou());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData YoloTestResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    YoloTestResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*YoloTestResult::GetClassData() const { return &_class_data_; }


void YoloTestResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<YoloTestResult*>(&to_msg);
  auto& from = static_cast<const YoloTestResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:YoloTestResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_accuracy() != 0) {
    _this->_internal_set_accuracy(from._internal_accuracy());
  }
  if (from._internal_precision() != 0) {
    _this->_internal_set_precision(from._internal_precision());
  }
  if (from._internal_recall() != 0) {
    _this->_internal_set_recall(from._internal_recall());
  }
  if (from._internal_ap() != 0) {
    _this->_internal_set_ap(from._internal_ap());
  }
  if (from._internal_iou() != 0) {
    _this->_internal_set_iou(from._internal_iou());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void YoloTestResult::CopyFrom(const YoloTestResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:YoloTestResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YoloTestResult::IsInitialized() const {
  return true;
}

void YoloTestResult::InternalSwap(YoloTestResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(YoloTestResult, _impl_.iou_)
      + sizeof(YoloTestResult::_impl_.iou_)
      - PROTOBUF_FIELD_OFFSET(YoloTestResult, _impl_.accuracy_)>(
          reinterpret_cast<char*>(&_impl_.accuracy_),
          reinterpret_cast<char*>(&other->_impl_.accuracy_));
}

::PROTOBUF_NAMESPACE_ID::Metadata YoloTestResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_YoloInfer_2eproto_getter, &descriptor_table_YoloInfer_2eproto_once,
      file_level_metadata_YoloInfer_2eproto[1]);
}

// ===================================================================

YoloTest::~YoloTest() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* YoloTest::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_YoloInfer_2eproto);
  return file_level_service_descriptors_YoloInfer_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* YoloTest::GetDescriptor() {
  return descriptor();
}

void YoloTest::testWithRoadSeg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::MongoImageOidRange*,
                         ::YoloTestResult*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method testWithRoadSeg() not implemented.");
  done->Run();
}

void YoloTest::testWithoutRoadSeg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::MongoImageOidRange*,
                         ::YoloTestResult*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method testWithoutRoadSeg() not implemented.");
  done->Run();
}

void YoloTest::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_YoloInfer_2eproto[0]);
  switch(method->index()) {
    case 0:
      testWithRoadSeg(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::MongoImageOidRange*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::YoloTestResult*>(
                 response),
             done);
      break;
    case 1:
      testWithoutRoadSeg(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::MongoImageOidRange*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::YoloTestResult*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& YoloTest::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::MongoImageOidRange::default_instance();
    case 1:
      return ::MongoImageOidRange::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& YoloTest::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::YoloTestResult::default_instance();
    case 1:
      return ::YoloTestResult::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

YoloTest_Stub::YoloTest_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
YoloTest_Stub::YoloTest_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
YoloTest_Stub::~YoloTest_Stub() {
  if (owns_channel_) delete channel_;
}

void YoloTest_Stub::testWithRoadSeg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::MongoImageOidRange* request,
                              ::YoloTestResult* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void YoloTest_Stub::testWithoutRoadSeg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::MongoImageOidRange* request,
                              ::YoloTestResult* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::MongoImageOidRange*
Arena::CreateMaybeMessage< ::MongoImageOidRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MongoImageOidRange >(arena);
}
template<> PROTOBUF_NOINLINE ::YoloTestResult*
Arena::CreateMaybeMessage< ::YoloTestResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::YoloTestResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
