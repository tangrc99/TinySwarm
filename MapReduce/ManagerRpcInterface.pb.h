// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ManagerRpcInterface.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ManagerRpcInterface_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ManagerRpcInterface_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ManagerRpcInterface_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ManagerRpcInterface_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ManagerRpcInterface_2eproto;
class AddressPool;
struct AddressPoolDefaultTypeInternal;
extern AddressPoolDefaultTypeInternal _AddressPool_default_instance_;
class JsonMessage;
struct JsonMessageDefaultTypeInternal;
extern JsonMessageDefaultTypeInternal _JsonMessage_default_instance_;
class ServiceInfo;
struct ServiceInfoDefaultTypeInternal;
extern ServiceInfoDefaultTypeInternal _ServiceInfo_default_instance_;
class ServiceName;
struct ServiceNameDefaultTypeInternal;
extern ServiceNameDefaultTypeInternal _ServiceName_default_instance_;
class ServiceParams;
struct ServiceParamsDefaultTypeInternal;
extern ServiceParamsDefaultTypeInternal _ServiceParams_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AddressPool* Arena::CreateMaybeMessage<::AddressPool>(Arena*);
template<> ::JsonMessage* Arena::CreateMaybeMessage<::JsonMessage>(Arena*);
template<> ::ServiceInfo* Arena::CreateMaybeMessage<::ServiceInfo>(Arena*);
template<> ::ServiceName* Arena::CreateMaybeMessage<::ServiceName>(Arena*);
template<> ::ServiceParams* Arena::CreateMaybeMessage<::ServiceParams>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ServiceName final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServiceName) */ {
 public:
  inline ServiceName() : ServiceName(nullptr) {}
  ~ServiceName() override;
  explicit constexpr ServiceName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServiceName(const ServiceName& from);
  ServiceName(ServiceName&& from) noexcept
    : ServiceName() {
    *this = ::std::move(from);
  }

  inline ServiceName& operator=(const ServiceName& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceName& operator=(ServiceName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServiceName& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServiceName* internal_default_instance() {
    return reinterpret_cast<const ServiceName*>(
               &_ServiceName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ServiceName& a, ServiceName& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceName* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServiceName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServiceName>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServiceName& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ServiceName& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceName* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServiceName";
  }
  protected:
  explicit ServiceName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:ServiceName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ManagerRpcInterface_2eproto;
};
// -------------------------------------------------------------------

class ServiceParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServiceParams) */ {
 public:
  inline ServiceParams() : ServiceParams(nullptr) {}
  ~ServiceParams() override;
  explicit constexpr ServiceParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServiceParams(const ServiceParams& from);
  ServiceParams(ServiceParams&& from) noexcept
    : ServiceParams() {
    *this = ::std::move(from);
  }

  inline ServiceParams& operator=(const ServiceParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceParams& operator=(ServiceParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServiceParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServiceParams* internal_default_instance() {
    return reinterpret_cast<const ServiceParams*>(
               &_ServiceParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ServiceParams& a, ServiceParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServiceParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServiceParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServiceParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ServiceParams& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServiceParams";
  }
  protected:
  explicit ServiceParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExeParamsFieldNumber = 4,
    kDockerParamsFieldNumber = 5,
    kServiceFieldNumber = 2,
    kServiceNumFieldNumber = 1,
    kTypeFieldNumber = 3,
    kRestartFieldNumber = 6,
    kPortFieldNumber = 7,
  };
  // repeated string exe_params = 4;
  int exe_params_size() const;
  private:
  int _internal_exe_params_size() const;
  public:
  void clear_exe_params();
  const std::string& exe_params(int index) const;
  std::string* mutable_exe_params(int index);
  void set_exe_params(int index, const std::string& value);
  void set_exe_params(int index, std::string&& value);
  void set_exe_params(int index, const char* value);
  void set_exe_params(int index, const char* value, size_t size);
  std::string* add_exe_params();
  void add_exe_params(const std::string& value);
  void add_exe_params(std::string&& value);
  void add_exe_params(const char* value);
  void add_exe_params(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& exe_params() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_exe_params();
  private:
  const std::string& _internal_exe_params(int index) const;
  std::string* _internal_add_exe_params();
  public:

  // repeated string docker_params = 5;
  int docker_params_size() const;
  private:
  int _internal_docker_params_size() const;
  public:
  void clear_docker_params();
  const std::string& docker_params(int index) const;
  std::string* mutable_docker_params(int index);
  void set_docker_params(int index, const std::string& value);
  void set_docker_params(int index, std::string&& value);
  void set_docker_params(int index, const char* value);
  void set_docker_params(int index, const char* value, size_t size);
  std::string* add_docker_params();
  void add_docker_params(const std::string& value);
  void add_docker_params(std::string&& value);
  void add_docker_params(const char* value);
  void add_docker_params(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& docker_params() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_docker_params();
  private:
  const std::string& _internal_docker_params(int index) const;
  std::string* _internal_add_docker_params();
  public:

  // string service = 2;
  void clear_service();
  const std::string& service() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_service(ArgT0&& arg0, ArgT... args);
  std::string* mutable_service();
  PROTOBUF_NODISCARD std::string* release_service();
  void set_allocated_service(std::string* service);
  private:
  const std::string& _internal_service() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service(const std::string& value);
  std::string* _internal_mutable_service();
  public:

  // int32 service_num = 1;
  void clear_service_num();
  int32_t service_num() const;
  void set_service_num(int32_t value);
  private:
  int32_t _internal_service_num() const;
  void _internal_set_service_num(int32_t value);
  public:

  // int32 type = 3;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // int32 restart = 6;
  void clear_restart();
  int32_t restart() const;
  void set_restart(int32_t value);
  private:
  int32_t _internal_restart() const;
  void _internal_set_restart(int32_t value);
  public:

  // int32 port = 7;
  void clear_port();
  int32_t port() const;
  void set_port(int32_t value);
  private:
  int32_t _internal_port() const;
  void _internal_set_port(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ServiceParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> exe_params_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> docker_params_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_;
  int32_t service_num_;
  int32_t type_;
  int32_t restart_;
  int32_t port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ManagerRpcInterface_2eproto;
};
// -------------------------------------------------------------------

class ServiceInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServiceInfo) */ {
 public:
  inline ServiceInfo() : ServiceInfo(nullptr) {}
  ~ServiceInfo() override;
  explicit constexpr ServiceInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServiceInfo(const ServiceInfo& from);
  ServiceInfo(ServiceInfo&& from) noexcept
    : ServiceInfo() {
    *this = ::std::move(from);
  }

  inline ServiceInfo& operator=(const ServiceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceInfo& operator=(ServiceInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServiceInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServiceInfo* internal_default_instance() {
    return reinterpret_cast<const ServiceInfo*>(
               &_ServiceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ServiceInfo& a, ServiceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServiceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServiceInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServiceInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ServiceInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServiceInfo";
  }
  protected:
  explicit ServiceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kParamsFieldNumber = 2,
  };
  // .ServiceName name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const ::ServiceName& name() const;
  PROTOBUF_NODISCARD ::ServiceName* release_name();
  ::ServiceName* mutable_name();
  void set_allocated_name(::ServiceName* name);
  private:
  const ::ServiceName& _internal_name() const;
  ::ServiceName* _internal_mutable_name();
  public:
  void unsafe_arena_set_allocated_name(
      ::ServiceName* name);
  ::ServiceName* unsafe_arena_release_name();

  // .ServiceParams params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::ServiceParams& params() const;
  PROTOBUF_NODISCARD ::ServiceParams* release_params();
  ::ServiceParams* mutable_params();
  void set_allocated_params(::ServiceParams* params);
  private:
  const ::ServiceParams& _internal_params() const;
  ::ServiceParams* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::ServiceParams* params);
  ::ServiceParams* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:ServiceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ServiceName* name_;
  ::ServiceParams* params_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ManagerRpcInterface_2eproto;
};
// -------------------------------------------------------------------

class JsonMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JsonMessage) */ {
 public:
  inline JsonMessage() : JsonMessage(nullptr) {}
  ~JsonMessage() override;
  explicit constexpr JsonMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JsonMessage(const JsonMessage& from);
  JsonMessage(JsonMessage&& from) noexcept
    : JsonMessage() {
    *this = ::std::move(from);
  }

  inline JsonMessage& operator=(const JsonMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline JsonMessage& operator=(JsonMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JsonMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const JsonMessage* internal_default_instance() {
    return reinterpret_cast<const JsonMessage*>(
               &_JsonMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(JsonMessage& a, JsonMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(JsonMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JsonMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JsonMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JsonMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JsonMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const JsonMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JsonMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JsonMessage";
  }
  protected:
  explicit JsonMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
  };
  // string content = 1;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:JsonMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ManagerRpcInterface_2eproto;
};
// -------------------------------------------------------------------

class AddressPool final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AddressPool) */ {
 public:
  inline AddressPool() : AddressPool(nullptr) {}
  ~AddressPool() override;
  explicit constexpr AddressPool(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddressPool(const AddressPool& from);
  AddressPool(AddressPool&& from) noexcept
    : AddressPool() {
    *this = ::std::move(from);
  }

  inline AddressPool& operator=(const AddressPool& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddressPool& operator=(AddressPool&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddressPool& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddressPool* internal_default_instance() {
    return reinterpret_cast<const AddressPool*>(
               &_AddressPool_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AddressPool& a, AddressPool& b) {
    a.Swap(&b);
  }
  inline void Swap(AddressPool* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddressPool* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddressPool* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddressPool>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddressPool& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddressPool& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddressPool* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AddressPool";
  }
  protected:
  explicit AddressPool(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPodAddressFieldNumber = 2,
    kProxyAddressFieldNumber = 1,
  };
  // repeated string pod_address = 2;
  int pod_address_size() const;
  private:
  int _internal_pod_address_size() const;
  public:
  void clear_pod_address();
  const std::string& pod_address(int index) const;
  std::string* mutable_pod_address(int index);
  void set_pod_address(int index, const std::string& value);
  void set_pod_address(int index, std::string&& value);
  void set_pod_address(int index, const char* value);
  void set_pod_address(int index, const char* value, size_t size);
  std::string* add_pod_address();
  void add_pod_address(const std::string& value);
  void add_pod_address(std::string&& value);
  void add_pod_address(const char* value);
  void add_pod_address(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& pod_address() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_pod_address();
  private:
  const std::string& _internal_pod_address(int index) const;
  std::string* _internal_add_pod_address();
  public:

  // string proxy_address = 1;
  void clear_proxy_address();
  const std::string& proxy_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_proxy_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_proxy_address();
  PROTOBUF_NODISCARD std::string* release_proxy_address();
  void set_allocated_proxy_address(std::string* proxy_address);
  private:
  const std::string& _internal_proxy_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proxy_address(const std::string& value);
  std::string* _internal_mutable_proxy_address();
  public:

  // @@protoc_insertion_point(class_scope:AddressPool)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> pod_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proxy_address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ManagerRpcInterface_2eproto;
};
// ===================================================================

class ManagerService_Stub;

class ManagerService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline ManagerService() {};
 public:
  virtual ~ManagerService();

  typedef ManagerService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void createService(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ServiceInfo* request,
                       ::JsonMessage* response,
                       ::google::protobuf::Closure* done);
  virtual void getServiceInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ServiceName* request,
                       ::JsonMessage* response,
                       ::google::protobuf::Closure* done);
  virtual void getAddressPool(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ServiceName* request,
                       ::AddressPool* response,
                       ::google::protobuf::Closure* done);
  virtual void stopService(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ServiceName* request,
                       ::ServiceName* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ManagerService);
};

class ManagerService_Stub : public ManagerService {
 public:
  ManagerService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  ManagerService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~ManagerService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements ManagerService ------------------------------------------

  void createService(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ServiceInfo* request,
                       ::JsonMessage* response,
                       ::google::protobuf::Closure* done);
  void getServiceInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ServiceName* request,
                       ::JsonMessage* response,
                       ::google::protobuf::Closure* done);
  void getAddressPool(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ServiceName* request,
                       ::AddressPool* response,
                       ::google::protobuf::Closure* done);
  void stopService(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ServiceName* request,
                       ::ServiceName* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ManagerService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServiceName

// string token = 1;
inline void ServiceName::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& ServiceName::token() const {
  // @@protoc_insertion_point(field_get:ServiceName.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServiceName::set_token(ArgT0&& arg0, ArgT... args) {
 
 token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ServiceName.token)
}
inline std::string* ServiceName::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:ServiceName.token)
  return _s;
}
inline const std::string& ServiceName::_internal_token() const {
  return token_.Get();
}
inline void ServiceName::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ServiceName::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ServiceName::release_token() {
  // @@protoc_insertion_point(field_release:ServiceName.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ServiceName::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ServiceName.token)
}

// -------------------------------------------------------------------

// ServiceParams

// int32 service_num = 1;
inline void ServiceParams::clear_service_num() {
  service_num_ = 0;
}
inline int32_t ServiceParams::_internal_service_num() const {
  return service_num_;
}
inline int32_t ServiceParams::service_num() const {
  // @@protoc_insertion_point(field_get:ServiceParams.service_num)
  return _internal_service_num();
}
inline void ServiceParams::_internal_set_service_num(int32_t value) {
  
  service_num_ = value;
}
inline void ServiceParams::set_service_num(int32_t value) {
  _internal_set_service_num(value);
  // @@protoc_insertion_point(field_set:ServiceParams.service_num)
}

// string service = 2;
inline void ServiceParams::clear_service() {
  service_.ClearToEmpty();
}
inline const std::string& ServiceParams::service() const {
  // @@protoc_insertion_point(field_get:ServiceParams.service)
  return _internal_service();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServiceParams::set_service(ArgT0&& arg0, ArgT... args) {
 
 service_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ServiceParams.service)
}
inline std::string* ServiceParams::mutable_service() {
  std::string* _s = _internal_mutable_service();
  // @@protoc_insertion_point(field_mutable:ServiceParams.service)
  return _s;
}
inline const std::string& ServiceParams::_internal_service() const {
  return service_.Get();
}
inline void ServiceParams::_internal_set_service(const std::string& value) {
  
  service_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ServiceParams::_internal_mutable_service() {
  
  return service_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ServiceParams::release_service() {
  // @@protoc_insertion_point(field_release:ServiceParams.service)
  return service_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ServiceParams::set_allocated_service(std::string* service) {
  if (service != nullptr) {
    
  } else {
    
  }
  service_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (service_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    service_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ServiceParams.service)
}

// int32 type = 3;
inline void ServiceParams::clear_type() {
  type_ = 0;
}
inline int32_t ServiceParams::_internal_type() const {
  return type_;
}
inline int32_t ServiceParams::type() const {
  // @@protoc_insertion_point(field_get:ServiceParams.type)
  return _internal_type();
}
inline void ServiceParams::_internal_set_type(int32_t value) {
  
  type_ = value;
}
inline void ServiceParams::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ServiceParams.type)
}

// repeated string exe_params = 4;
inline int ServiceParams::_internal_exe_params_size() const {
  return exe_params_.size();
}
inline int ServiceParams::exe_params_size() const {
  return _internal_exe_params_size();
}
inline void ServiceParams::clear_exe_params() {
  exe_params_.Clear();
}
inline std::string* ServiceParams::add_exe_params() {
  std::string* _s = _internal_add_exe_params();
  // @@protoc_insertion_point(field_add_mutable:ServiceParams.exe_params)
  return _s;
}
inline const std::string& ServiceParams::_internal_exe_params(int index) const {
  return exe_params_.Get(index);
}
inline const std::string& ServiceParams::exe_params(int index) const {
  // @@protoc_insertion_point(field_get:ServiceParams.exe_params)
  return _internal_exe_params(index);
}
inline std::string* ServiceParams::mutable_exe_params(int index) {
  // @@protoc_insertion_point(field_mutable:ServiceParams.exe_params)
  return exe_params_.Mutable(index);
}
inline void ServiceParams::set_exe_params(int index, const std::string& value) {
  exe_params_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ServiceParams.exe_params)
}
inline void ServiceParams::set_exe_params(int index, std::string&& value) {
  exe_params_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ServiceParams.exe_params)
}
inline void ServiceParams::set_exe_params(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  exe_params_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ServiceParams.exe_params)
}
inline void ServiceParams::set_exe_params(int index, const char* value, size_t size) {
  exe_params_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ServiceParams.exe_params)
}
inline std::string* ServiceParams::_internal_add_exe_params() {
  return exe_params_.Add();
}
inline void ServiceParams::add_exe_params(const std::string& value) {
  exe_params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ServiceParams.exe_params)
}
inline void ServiceParams::add_exe_params(std::string&& value) {
  exe_params_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ServiceParams.exe_params)
}
inline void ServiceParams::add_exe_params(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  exe_params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ServiceParams.exe_params)
}
inline void ServiceParams::add_exe_params(const char* value, size_t size) {
  exe_params_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ServiceParams.exe_params)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ServiceParams::exe_params() const {
  // @@protoc_insertion_point(field_list:ServiceParams.exe_params)
  return exe_params_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ServiceParams::mutable_exe_params() {
  // @@protoc_insertion_point(field_mutable_list:ServiceParams.exe_params)
  return &exe_params_;
}

// repeated string docker_params = 5;
inline int ServiceParams::_internal_docker_params_size() const {
  return docker_params_.size();
}
inline int ServiceParams::docker_params_size() const {
  return _internal_docker_params_size();
}
inline void ServiceParams::clear_docker_params() {
  docker_params_.Clear();
}
inline std::string* ServiceParams::add_docker_params() {
  std::string* _s = _internal_add_docker_params();
  // @@protoc_insertion_point(field_add_mutable:ServiceParams.docker_params)
  return _s;
}
inline const std::string& ServiceParams::_internal_docker_params(int index) const {
  return docker_params_.Get(index);
}
inline const std::string& ServiceParams::docker_params(int index) const {
  // @@protoc_insertion_point(field_get:ServiceParams.docker_params)
  return _internal_docker_params(index);
}
inline std::string* ServiceParams::mutable_docker_params(int index) {
  // @@protoc_insertion_point(field_mutable:ServiceParams.docker_params)
  return docker_params_.Mutable(index);
}
inline void ServiceParams::set_docker_params(int index, const std::string& value) {
  docker_params_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ServiceParams.docker_params)
}
inline void ServiceParams::set_docker_params(int index, std::string&& value) {
  docker_params_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ServiceParams.docker_params)
}
inline void ServiceParams::set_docker_params(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  docker_params_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ServiceParams.docker_params)
}
inline void ServiceParams::set_docker_params(int index, const char* value, size_t size) {
  docker_params_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ServiceParams.docker_params)
}
inline std::string* ServiceParams::_internal_add_docker_params() {
  return docker_params_.Add();
}
inline void ServiceParams::add_docker_params(const std::string& value) {
  docker_params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ServiceParams.docker_params)
}
inline void ServiceParams::add_docker_params(std::string&& value) {
  docker_params_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ServiceParams.docker_params)
}
inline void ServiceParams::add_docker_params(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  docker_params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ServiceParams.docker_params)
}
inline void ServiceParams::add_docker_params(const char* value, size_t size) {
  docker_params_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ServiceParams.docker_params)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ServiceParams::docker_params() const {
  // @@protoc_insertion_point(field_list:ServiceParams.docker_params)
  return docker_params_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ServiceParams::mutable_docker_params() {
  // @@protoc_insertion_point(field_mutable_list:ServiceParams.docker_params)
  return &docker_params_;
}

// int32 restart = 6;
inline void ServiceParams::clear_restart() {
  restart_ = 0;
}
inline int32_t ServiceParams::_internal_restart() const {
  return restart_;
}
inline int32_t ServiceParams::restart() const {
  // @@protoc_insertion_point(field_get:ServiceParams.restart)
  return _internal_restart();
}
inline void ServiceParams::_internal_set_restart(int32_t value) {
  
  restart_ = value;
}
inline void ServiceParams::set_restart(int32_t value) {
  _internal_set_restart(value);
  // @@protoc_insertion_point(field_set:ServiceParams.restart)
}

// int32 port = 7;
inline void ServiceParams::clear_port() {
  port_ = 0;
}
inline int32_t ServiceParams::_internal_port() const {
  return port_;
}
inline int32_t ServiceParams::port() const {
  // @@protoc_insertion_point(field_get:ServiceParams.port)
  return _internal_port();
}
inline void ServiceParams::_internal_set_port(int32_t value) {
  
  port_ = value;
}
inline void ServiceParams::set_port(int32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:ServiceParams.port)
}

// -------------------------------------------------------------------

// ServiceInfo

// .ServiceName name = 1;
inline bool ServiceInfo::_internal_has_name() const {
  return this != internal_default_instance() && name_ != nullptr;
}
inline bool ServiceInfo::has_name() const {
  return _internal_has_name();
}
inline void ServiceInfo::clear_name() {
  if (GetArenaForAllocation() == nullptr && name_ != nullptr) {
    delete name_;
  }
  name_ = nullptr;
}
inline const ::ServiceName& ServiceInfo::_internal_name() const {
  const ::ServiceName* p = name_;
  return p != nullptr ? *p : reinterpret_cast<const ::ServiceName&>(
      ::_ServiceName_default_instance_);
}
inline const ::ServiceName& ServiceInfo::name() const {
  // @@protoc_insertion_point(field_get:ServiceInfo.name)
  return _internal_name();
}
inline void ServiceInfo::unsafe_arena_set_allocated_name(
    ::ServiceName* name) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_);
  }
  name_ = name;
  if (name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ServiceInfo.name)
}
inline ::ServiceName* ServiceInfo::release_name() {
  
  ::ServiceName* temp = name_;
  name_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ServiceName* ServiceInfo::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_release:ServiceInfo.name)
  
  ::ServiceName* temp = name_;
  name_ = nullptr;
  return temp;
}
inline ::ServiceName* ServiceInfo::_internal_mutable_name() {
  
  if (name_ == nullptr) {
    auto* p = CreateMaybeMessage<::ServiceName>(GetArenaForAllocation());
    name_ = p;
  }
  return name_;
}
inline ::ServiceName* ServiceInfo::mutable_name() {
  ::ServiceName* _msg = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ServiceInfo.name)
  return _msg;
}
inline void ServiceInfo::set_allocated_name(::ServiceName* name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete name_;
  }
  if (name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ServiceName>::GetOwningArena(name);
    if (message_arena != submessage_arena) {
      name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:ServiceInfo.name)
}

// .ServiceParams params = 2;
inline bool ServiceInfo::_internal_has_params() const {
  return this != internal_default_instance() && params_ != nullptr;
}
inline bool ServiceInfo::has_params() const {
  return _internal_has_params();
}
inline void ServiceInfo::clear_params() {
  if (GetArenaForAllocation() == nullptr && params_ != nullptr) {
    delete params_;
  }
  params_ = nullptr;
}
inline const ::ServiceParams& ServiceInfo::_internal_params() const {
  const ::ServiceParams* p = params_;
  return p != nullptr ? *p : reinterpret_cast<const ::ServiceParams&>(
      ::_ServiceParams_default_instance_);
}
inline const ::ServiceParams& ServiceInfo::params() const {
  // @@protoc_insertion_point(field_get:ServiceInfo.params)
  return _internal_params();
}
inline void ServiceInfo::unsafe_arena_set_allocated_params(
    ::ServiceParams* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(params_);
  }
  params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ServiceInfo.params)
}
inline ::ServiceParams* ServiceInfo::release_params() {
  
  ::ServiceParams* temp = params_;
  params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ServiceParams* ServiceInfo::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:ServiceInfo.params)
  
  ::ServiceParams* temp = params_;
  params_ = nullptr;
  return temp;
}
inline ::ServiceParams* ServiceInfo::_internal_mutable_params() {
  
  if (params_ == nullptr) {
    auto* p = CreateMaybeMessage<::ServiceParams>(GetArenaForAllocation());
    params_ = p;
  }
  return params_;
}
inline ::ServiceParams* ServiceInfo::mutable_params() {
  ::ServiceParams* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:ServiceInfo.params)
  return _msg;
}
inline void ServiceInfo::set_allocated_params(::ServiceParams* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ServiceParams>::GetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  params_ = params;
  // @@protoc_insertion_point(field_set_allocated:ServiceInfo.params)
}

// -------------------------------------------------------------------

// JsonMessage

// string content = 1;
inline void JsonMessage::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& JsonMessage::content() const {
  // @@protoc_insertion_point(field_get:JsonMessage.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JsonMessage::set_content(ArgT0&& arg0, ArgT... args) {
 
 content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:JsonMessage.content)
}
inline std::string* JsonMessage::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:JsonMessage.content)
  return _s;
}
inline const std::string& JsonMessage::_internal_content() const {
  return content_.Get();
}
inline void JsonMessage::_internal_set_content(const std::string& value) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* JsonMessage::_internal_mutable_content() {
  
  return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* JsonMessage::release_content() {
  // @@protoc_insertion_point(field_release:JsonMessage.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void JsonMessage::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (content_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:JsonMessage.content)
}

// -------------------------------------------------------------------

// AddressPool

// string proxy_address = 1;
inline void AddressPool::clear_proxy_address() {
  proxy_address_.ClearToEmpty();
}
inline const std::string& AddressPool::proxy_address() const {
  // @@protoc_insertion_point(field_get:AddressPool.proxy_address)
  return _internal_proxy_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddressPool::set_proxy_address(ArgT0&& arg0, ArgT... args) {
 
 proxy_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AddressPool.proxy_address)
}
inline std::string* AddressPool::mutable_proxy_address() {
  std::string* _s = _internal_mutable_proxy_address();
  // @@protoc_insertion_point(field_mutable:AddressPool.proxy_address)
  return _s;
}
inline const std::string& AddressPool::_internal_proxy_address() const {
  return proxy_address_.Get();
}
inline void AddressPool::_internal_set_proxy_address(const std::string& value) {
  
  proxy_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AddressPool::_internal_mutable_proxy_address() {
  
  return proxy_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AddressPool::release_proxy_address() {
  // @@protoc_insertion_point(field_release:AddressPool.proxy_address)
  return proxy_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AddressPool::set_allocated_proxy_address(std::string* proxy_address) {
  if (proxy_address != nullptr) {
    
  } else {
    
  }
  proxy_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proxy_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (proxy_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    proxy_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AddressPool.proxy_address)
}

// repeated string pod_address = 2;
inline int AddressPool::_internal_pod_address_size() const {
  return pod_address_.size();
}
inline int AddressPool::pod_address_size() const {
  return _internal_pod_address_size();
}
inline void AddressPool::clear_pod_address() {
  pod_address_.Clear();
}
inline std::string* AddressPool::add_pod_address() {
  std::string* _s = _internal_add_pod_address();
  // @@protoc_insertion_point(field_add_mutable:AddressPool.pod_address)
  return _s;
}
inline const std::string& AddressPool::_internal_pod_address(int index) const {
  return pod_address_.Get(index);
}
inline const std::string& AddressPool::pod_address(int index) const {
  // @@protoc_insertion_point(field_get:AddressPool.pod_address)
  return _internal_pod_address(index);
}
inline std::string* AddressPool::mutable_pod_address(int index) {
  // @@protoc_insertion_point(field_mutable:AddressPool.pod_address)
  return pod_address_.Mutable(index);
}
inline void AddressPool::set_pod_address(int index, const std::string& value) {
  pod_address_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:AddressPool.pod_address)
}
inline void AddressPool::set_pod_address(int index, std::string&& value) {
  pod_address_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:AddressPool.pod_address)
}
inline void AddressPool::set_pod_address(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pod_address_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AddressPool.pod_address)
}
inline void AddressPool::set_pod_address(int index, const char* value, size_t size) {
  pod_address_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AddressPool.pod_address)
}
inline std::string* AddressPool::_internal_add_pod_address() {
  return pod_address_.Add();
}
inline void AddressPool::add_pod_address(const std::string& value) {
  pod_address_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AddressPool.pod_address)
}
inline void AddressPool::add_pod_address(std::string&& value) {
  pod_address_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AddressPool.pod_address)
}
inline void AddressPool::add_pod_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pod_address_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AddressPool.pod_address)
}
inline void AddressPool::add_pod_address(const char* value, size_t size) {
  pod_address_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AddressPool.pod_address)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AddressPool::pod_address() const {
  // @@protoc_insertion_point(field_list:AddressPool.pod_address)
  return pod_address_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AddressPool::mutable_pod_address() {
  // @@protoc_insertion_point(field_mutable_list:AddressPool.pod_address)
  return &pod_address_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ManagerRpcInterface_2eproto
