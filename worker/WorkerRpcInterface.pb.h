// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WorkerRpcInterface.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_WorkerRpcInterface_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_WorkerRpcInterface_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_WorkerRpcInterface_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_WorkerRpcInterface_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_WorkerRpcInterface_2eproto;
class CheckInput;
struct CheckInputDefaultTypeInternal;
extern CheckInputDefaultTypeInternal _CheckInput_default_instance_;
class DownService;
struct DownServiceDefaultTypeInternal;
extern DownServiceDefaultTypeInternal _DownService_default_instance_;
class DownServices;
struct DownServicesDefaultTypeInternal;
extern DownServicesDefaultTypeInternal _DownServices_default_instance_;
class Echo;
struct EchoDefaultTypeInternal;
extern EchoDefaultTypeInternal _Echo_default_instance_;
class ForkEcho;
struct ForkEchoDefaultTypeInternal;
extern ForkEchoDefaultTypeInternal _ForkEcho_default_instance_;
class ForkInput;
struct ForkInputDefaultTypeInternal;
extern ForkInputDefaultTypeInternal _ForkInput_default_instance_;
class ShutdownInput;
struct ShutdownInputDefaultTypeInternal;
extern ShutdownInputDefaultTypeInternal _ShutdownInput_default_instance_;
class StatusParam;
struct StatusParamDefaultTypeInternal;
extern StatusParamDefaultTypeInternal _StatusParam_default_instance_;
class UserServiceDescriptor;
struct UserServiceDescriptorDefaultTypeInternal;
extern UserServiceDescriptorDefaultTypeInternal _UserServiceDescriptor_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CheckInput* Arena::CreateMaybeMessage<::CheckInput>(Arena*);
template<> ::DownService* Arena::CreateMaybeMessage<::DownService>(Arena*);
template<> ::DownServices* Arena::CreateMaybeMessage<::DownServices>(Arena*);
template<> ::Echo* Arena::CreateMaybeMessage<::Echo>(Arena*);
template<> ::ForkEcho* Arena::CreateMaybeMessage<::ForkEcho>(Arena*);
template<> ::ForkInput* Arena::CreateMaybeMessage<::ForkInput>(Arena*);
template<> ::ShutdownInput* Arena::CreateMaybeMessage<::ShutdownInput>(Arena*);
template<> ::StatusParam* Arena::CreateMaybeMessage<::StatusParam>(Arena*);
template<> ::UserServiceDescriptor* Arena::CreateMaybeMessage<::UserServiceDescriptor>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum ServiceType : int {
  host = 0,
  docker = 1,
  ServiceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ServiceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ServiceType_IsValid(int value);
constexpr ServiceType ServiceType_MIN = host;
constexpr ServiceType ServiceType_MAX = docker;
constexpr int ServiceType_ARRAYSIZE = ServiceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServiceType_descriptor();
template<typename T>
inline const std::string& ServiceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServiceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServiceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServiceType_descriptor(), enum_t_value);
}
inline bool ServiceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServiceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServiceType>(
    ServiceType_descriptor(), name, value);
}
// ===================================================================

class UserServiceDescriptor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserServiceDescriptor) */ {
 public:
  inline UserServiceDescriptor() : UserServiceDescriptor(nullptr) {}
  ~UserServiceDescriptor() override;
  explicit PROTOBUF_CONSTEXPR UserServiceDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserServiceDescriptor(const UserServiceDescriptor& from);
  UserServiceDescriptor(UserServiceDescriptor&& from) noexcept
    : UserServiceDescriptor() {
    *this = ::std::move(from);
  }

  inline UserServiceDescriptor& operator=(const UserServiceDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserServiceDescriptor& operator=(UserServiceDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserServiceDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserServiceDescriptor* internal_default_instance() {
    return reinterpret_cast<const UserServiceDescriptor*>(
               &_UserServiceDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserServiceDescriptor& a, UserServiceDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(UserServiceDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserServiceDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserServiceDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserServiceDescriptor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserServiceDescriptor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserServiceDescriptor& from) {
    UserServiceDescriptor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserServiceDescriptor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserServiceDescriptor";
  }
  protected:
  explicit UserServiceDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceFieldNumber = 1,
    kAliasFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // string service = 1;
  void clear_service();
  const std::string& service() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_service(ArgT0&& arg0, ArgT... args);
  std::string* mutable_service();
  PROTOBUF_NODISCARD std::string* release_service();
  void set_allocated_service(std::string* service);
  private:
  const std::string& _internal_service() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service(const std::string& value);
  std::string* _internal_mutable_service();
  public:

  // string alias = 2;
  void clear_alias();
  const std::string& alias() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_alias(ArgT0&& arg0, ArgT... args);
  std::string* mutable_alias();
  PROTOBUF_NODISCARD std::string* release_alias();
  void set_allocated_alias(std::string* alias);
  private:
  const std::string& _internal_alias() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alias(const std::string& value);
  std::string* _internal_mutable_alias();
  public:

  // .ServiceType type = 3;
  void clear_type();
  ::ServiceType type() const;
  void set_type(::ServiceType value);
  private:
  ::ServiceType _internal_type() const;
  void _internal_set_type(::ServiceType value);
  public:

  // @@protoc_insertion_point(class_scope:UserServiceDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alias_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_WorkerRpcInterface_2eproto;
};
// -------------------------------------------------------------------

class ForkInput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ForkInput) */ {
 public:
  inline ForkInput() : ForkInput(nullptr) {}
  ~ForkInput() override;
  explicit PROTOBUF_CONSTEXPR ForkInput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ForkInput(const ForkInput& from);
  ForkInput(ForkInput&& from) noexcept
    : ForkInput() {
    *this = ::std::move(from);
  }

  inline ForkInput& operator=(const ForkInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline ForkInput& operator=(ForkInput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ForkInput& default_instance() {
    return *internal_default_instance();
  }
  static inline const ForkInput* internal_default_instance() {
    return reinterpret_cast<const ForkInput*>(
               &_ForkInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ForkInput& a, ForkInput& b) {
    a.Swap(&b);
  }
  inline void Swap(ForkInput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ForkInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ForkInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ForkInput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ForkInput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ForkInput& from) {
    ForkInput::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ForkInput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ForkInput";
  }
  protected:
  explicit ForkInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExeParamsFieldNumber = 5,
    kDockerParamsFieldNumber = 6,
    kServiceFieldNumber = 1,
    kOwnerFieldNumber = 2,
    kAliasFieldNumber = 4,
    kTypeFieldNumber = 3,
    kRestartFieldNumber = 7,
    kPortFieldNumber = 8,
  };
  // repeated string exe_params = 5;
  int exe_params_size() const;
  private:
  int _internal_exe_params_size() const;
  public:
  void clear_exe_params();
  const std::string& exe_params(int index) const;
  std::string* mutable_exe_params(int index);
  void set_exe_params(int index, const std::string& value);
  void set_exe_params(int index, std::string&& value);
  void set_exe_params(int index, const char* value);
  void set_exe_params(int index, const char* value, size_t size);
  std::string* add_exe_params();
  void add_exe_params(const std::string& value);
  void add_exe_params(std::string&& value);
  void add_exe_params(const char* value);
  void add_exe_params(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& exe_params() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_exe_params();
  private:
  const std::string& _internal_exe_params(int index) const;
  std::string* _internal_add_exe_params();
  public:

  // repeated string docker_params = 6;
  int docker_params_size() const;
  private:
  int _internal_docker_params_size() const;
  public:
  void clear_docker_params();
  const std::string& docker_params(int index) const;
  std::string* mutable_docker_params(int index);
  void set_docker_params(int index, const std::string& value);
  void set_docker_params(int index, std::string&& value);
  void set_docker_params(int index, const char* value);
  void set_docker_params(int index, const char* value, size_t size);
  std::string* add_docker_params();
  void add_docker_params(const std::string& value);
  void add_docker_params(std::string&& value);
  void add_docker_params(const char* value);
  void add_docker_params(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& docker_params() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_docker_params();
  private:
  const std::string& _internal_docker_params(int index) const;
  std::string* _internal_add_docker_params();
  public:

  // string service = 1;
  void clear_service();
  const std::string& service() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_service(ArgT0&& arg0, ArgT... args);
  std::string* mutable_service();
  PROTOBUF_NODISCARD std::string* release_service();
  void set_allocated_service(std::string* service);
  private:
  const std::string& _internal_service() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service(const std::string& value);
  std::string* _internal_mutable_service();
  public:

  // string owner = 2;
  void clear_owner();
  const std::string& owner() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner();
  PROTOBUF_NODISCARD std::string* release_owner();
  void set_allocated_owner(std::string* owner);
  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(const std::string& value);
  std::string* _internal_mutable_owner();
  public:

  // string alias = 4;
  void clear_alias();
  const std::string& alias() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_alias(ArgT0&& arg0, ArgT... args);
  std::string* mutable_alias();
  PROTOBUF_NODISCARD std::string* release_alias();
  void set_allocated_alias(std::string* alias);
  private:
  const std::string& _internal_alias() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alias(const std::string& value);
  std::string* _internal_mutable_alias();
  public:

  // .ServiceType type = 3;
  void clear_type();
  ::ServiceType type() const;
  void set_type(::ServiceType value);
  private:
  ::ServiceType _internal_type() const;
  void _internal_set_type(::ServiceType value);
  public:

  // int32 restart = 7;
  void clear_restart();
  int32_t restart() const;
  void set_restart(int32_t value);
  private:
  int32_t _internal_restart() const;
  void _internal_set_restart(int32_t value);
  public:

  // int32 port = 8;
  void clear_port();
  int32_t port() const;
  void set_port(int32_t value);
  private:
  int32_t _internal_port() const;
  void _internal_set_port(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ForkInput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> exe_params_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> docker_params_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alias_;
    int type_;
    int32_t restart_;
    int32_t port_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_WorkerRpcInterface_2eproto;
};
// -------------------------------------------------------------------

class ForkEcho final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ForkEcho) */ {
 public:
  inline ForkEcho() : ForkEcho(nullptr) {}
  ~ForkEcho() override;
  explicit PROTOBUF_CONSTEXPR ForkEcho(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ForkEcho(const ForkEcho& from);
  ForkEcho(ForkEcho&& from) noexcept
    : ForkEcho() {
    *this = ::std::move(from);
  }

  inline ForkEcho& operator=(const ForkEcho& from) {
    CopyFrom(from);
    return *this;
  }
  inline ForkEcho& operator=(ForkEcho&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ForkEcho& default_instance() {
    return *internal_default_instance();
  }
  static inline const ForkEcho* internal_default_instance() {
    return reinterpret_cast<const ForkEcho*>(
               &_ForkEcho_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ForkEcho& a, ForkEcho& b) {
    a.Swap(&b);
  }
  inline void Swap(ForkEcho* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ForkEcho* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ForkEcho* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ForkEcho>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ForkEcho& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ForkEcho& from) {
    ForkEcho::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ForkEcho* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ForkEcho";
  }
  protected:
  explicit ForkEcho(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorTextFieldNumber = 3,
    kSdFieldNumber = 1,
    kFailFieldNumber = 2,
  };
  // string error_text = 3;
  void clear_error_text();
  const std::string& error_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_text();
  PROTOBUF_NODISCARD std::string* release_error_text();
  void set_allocated_error_text(std::string* error_text);
  private:
  const std::string& _internal_error_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_text(const std::string& value);
  std::string* _internal_mutable_error_text();
  public:

  // .UserServiceDescriptor sd = 1;
  bool has_sd() const;
  private:
  bool _internal_has_sd() const;
  public:
  void clear_sd();
  const ::UserServiceDescriptor& sd() const;
  PROTOBUF_NODISCARD ::UserServiceDescriptor* release_sd();
  ::UserServiceDescriptor* mutable_sd();
  void set_allocated_sd(::UserServiceDescriptor* sd);
  private:
  const ::UserServiceDescriptor& _internal_sd() const;
  ::UserServiceDescriptor* _internal_mutable_sd();
  public:
  void unsafe_arena_set_allocated_sd(
      ::UserServiceDescriptor* sd);
  ::UserServiceDescriptor* unsafe_arena_release_sd();

  // bool fail = 2;
  void clear_fail();
  bool fail() const;
  void set_fail(bool value);
  private:
  bool _internal_fail() const;
  void _internal_set_fail(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ForkEcho)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_text_;
    ::UserServiceDescriptor* sd_;
    bool fail_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_WorkerRpcInterface_2eproto;
};
// -------------------------------------------------------------------

class ShutdownInput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ShutdownInput) */ {
 public:
  inline ShutdownInput() : ShutdownInput(nullptr) {}
  ~ShutdownInput() override;
  explicit PROTOBUF_CONSTEXPR ShutdownInput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShutdownInput(const ShutdownInput& from);
  ShutdownInput(ShutdownInput&& from) noexcept
    : ShutdownInput() {
    *this = ::std::move(from);
  }

  inline ShutdownInput& operator=(const ShutdownInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShutdownInput& operator=(ShutdownInput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShutdownInput& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShutdownInput* internal_default_instance() {
    return reinterpret_cast<const ShutdownInput*>(
               &_ShutdownInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ShutdownInput& a, ShutdownInput& b) {
    a.Swap(&b);
  }
  inline void Swap(ShutdownInput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShutdownInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShutdownInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShutdownInput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShutdownInput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ShutdownInput& from) {
    ShutdownInput::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShutdownInput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ShutdownInput";
  }
  protected:
  explicit ShutdownInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 2,
    kSdFieldNumber = 1,
  };
  // string user_info = 2;
  void clear_user_info();
  const std::string& user_info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_info();
  PROTOBUF_NODISCARD std::string* release_user_info();
  void set_allocated_user_info(std::string* user_info);
  private:
  const std::string& _internal_user_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_info(const std::string& value);
  std::string* _internal_mutable_user_info();
  public:

  // .UserServiceDescriptor sd = 1;
  bool has_sd() const;
  private:
  bool _internal_has_sd() const;
  public:
  void clear_sd();
  const ::UserServiceDescriptor& sd() const;
  PROTOBUF_NODISCARD ::UserServiceDescriptor* release_sd();
  ::UserServiceDescriptor* mutable_sd();
  void set_allocated_sd(::UserServiceDescriptor* sd);
  private:
  const ::UserServiceDescriptor& _internal_sd() const;
  ::UserServiceDescriptor* _internal_mutable_sd();
  public:
  void unsafe_arena_set_allocated_sd(
      ::UserServiceDescriptor* sd);
  ::UserServiceDescriptor* unsafe_arena_release_sd();

  // @@protoc_insertion_point(class_scope:ShutdownInput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_info_;
    ::UserServiceDescriptor* sd_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_WorkerRpcInterface_2eproto;
};
// -------------------------------------------------------------------

class Echo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Echo) */ {
 public:
  inline Echo() : Echo(nullptr) {}
  ~Echo() override;
  explicit PROTOBUF_CONSTEXPR Echo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Echo(const Echo& from);
  Echo(Echo&& from) noexcept
    : Echo() {
    *this = ::std::move(from);
  }

  inline Echo& operator=(const Echo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Echo& operator=(Echo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Echo& default_instance() {
    return *internal_default_instance();
  }
  static inline const Echo* internal_default_instance() {
    return reinterpret_cast<const Echo*>(
               &_Echo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Echo& a, Echo& b) {
    a.Swap(&b);
  }
  inline void Swap(Echo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Echo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Echo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Echo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Echo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Echo& from) {
    Echo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Echo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Echo";
  }
  protected:
  explicit Echo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorTextFieldNumber = 2,
    kFailFieldNumber = 1,
  };
  // string error_text = 2;
  void clear_error_text();
  const std::string& error_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_text();
  PROTOBUF_NODISCARD std::string* release_error_text();
  void set_allocated_error_text(std::string* error_text);
  private:
  const std::string& _internal_error_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_text(const std::string& value);
  std::string* _internal_mutable_error_text();
  public:

  // bool fail = 1;
  void clear_fail();
  bool fail() const;
  void set_fail(bool value);
  private:
  bool _internal_fail() const;
  void _internal_set_fail(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Echo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_text_;
    bool fail_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_WorkerRpcInterface_2eproto;
};
// -------------------------------------------------------------------

class CheckInput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CheckInput) */ {
 public:
  inline CheckInput() : CheckInput(nullptr) {}
  ~CheckInput() override;
  explicit PROTOBUF_CONSTEXPR CheckInput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CheckInput(const CheckInput& from);
  CheckInput(CheckInput&& from) noexcept
    : CheckInput() {
    *this = ::std::move(from);
  }

  inline CheckInput& operator=(const CheckInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckInput& operator=(CheckInput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CheckInput& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckInput* internal_default_instance() {
    return reinterpret_cast<const CheckInput*>(
               &_CheckInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CheckInput& a, CheckInput& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckInput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CheckInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CheckInput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CheckInput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CheckInput& from) {
    CheckInput::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckInput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CheckInput";
  }
  protected:
  explicit CheckInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 1,
    kLineFieldNumber = 2,
  };
  // string user_info = 1;
  void clear_user_info();
  const std::string& user_info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_info();
  PROTOBUF_NODISCARD std::string* release_user_info();
  void set_allocated_user_info(std::string* user_info);
  private:
  const std::string& _internal_user_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_info(const std::string& value);
  std::string* _internal_mutable_user_info();
  public:

  // int32 line = 2;
  void clear_line();
  int32_t line() const;
  void set_line(int32_t value);
  private:
  int32_t _internal_line() const;
  void _internal_set_line(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CheckInput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_info_;
    int32_t line_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_WorkerRpcInterface_2eproto;
};
// -------------------------------------------------------------------

class DownService final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DownService) */ {
 public:
  inline DownService() : DownService(nullptr) {}
  ~DownService() override;
  explicit PROTOBUF_CONSTEXPR DownService(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DownService(const DownService& from);
  DownService(DownService&& from) noexcept
    : DownService() {
    *this = ::std::move(from);
  }

  inline DownService& operator=(const DownService& from) {
    CopyFrom(from);
    return *this;
  }
  inline DownService& operator=(DownService&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DownService& default_instance() {
    return *internal_default_instance();
  }
  static inline const DownService* internal_default_instance() {
    return reinterpret_cast<const DownService*>(
               &_DownService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DownService& a, DownService& b) {
    a.Swap(&b);
  }
  inline void Swap(DownService* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DownService* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DownService* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DownService>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DownService& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DownService& from) {
    DownService::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DownService* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DownService";
  }
  protected:
  explicit DownService(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorTextFieldNumber = 1,
    kAliasFieldNumber = 3,
    kOutFileFieldNumber = 4,
    kExitNumFieldNumber = 2,
  };
  // string error_text = 1;
  void clear_error_text();
  const std::string& error_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_text();
  PROTOBUF_NODISCARD std::string* release_error_text();
  void set_allocated_error_text(std::string* error_text);
  private:
  const std::string& _internal_error_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_text(const std::string& value);
  std::string* _internal_mutable_error_text();
  public:

  // string alias = 3;
  void clear_alias();
  const std::string& alias() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_alias(ArgT0&& arg0, ArgT... args);
  std::string* mutable_alias();
  PROTOBUF_NODISCARD std::string* release_alias();
  void set_allocated_alias(std::string* alias);
  private:
  const std::string& _internal_alias() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alias(const std::string& value);
  std::string* _internal_mutable_alias();
  public:

  // string out_file = 4;
  void clear_out_file();
  const std::string& out_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_out_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_out_file();
  PROTOBUF_NODISCARD std::string* release_out_file();
  void set_allocated_out_file(std::string* out_file);
  private:
  const std::string& _internal_out_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_out_file(const std::string& value);
  std::string* _internal_mutable_out_file();
  public:

  // int32 exit_num = 2;
  void clear_exit_num();
  int32_t exit_num() const;
  void set_exit_num(int32_t value);
  private:
  int32_t _internal_exit_num() const;
  void _internal_set_exit_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DownService)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_text_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alias_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr out_file_;
    int32_t exit_num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_WorkerRpcInterface_2eproto;
};
// -------------------------------------------------------------------

class DownServices final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DownServices) */ {
 public:
  inline DownServices() : DownServices(nullptr) {}
  ~DownServices() override;
  explicit PROTOBUF_CONSTEXPR DownServices(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DownServices(const DownServices& from);
  DownServices(DownServices&& from) noexcept
    : DownServices() {
    *this = ::std::move(from);
  }

  inline DownServices& operator=(const DownServices& from) {
    CopyFrom(from);
    return *this;
  }
  inline DownServices& operator=(DownServices&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DownServices& default_instance() {
    return *internal_default_instance();
  }
  static inline const DownServices* internal_default_instance() {
    return reinterpret_cast<const DownServices*>(
               &_DownServices_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DownServices& a, DownServices& b) {
    a.Swap(&b);
  }
  inline void Swap(DownServices* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DownServices* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DownServices* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DownServices>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DownServices& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DownServices& from) {
    DownServices::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DownServices* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DownServices";
  }
  protected:
  explicit DownServices(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceFieldNumber = 1,
  };
  // repeated .DownService service = 1;
  int service_size() const;
  private:
  int _internal_service_size() const;
  public:
  void clear_service();
  ::DownService* mutable_service(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DownService >*
      mutable_service();
  private:
  const ::DownService& _internal_service(int index) const;
  ::DownService* _internal_add_service();
  public:
  const ::DownService& service(int index) const;
  ::DownService* add_service();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DownService >&
      service() const;

  // @@protoc_insertion_point(class_scope:DownServices)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DownService > service_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_WorkerRpcInterface_2eproto;
};
// -------------------------------------------------------------------

class StatusParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StatusParam) */ {
 public:
  inline StatusParam() : StatusParam(nullptr) {}
  ~StatusParam() override;
  explicit PROTOBUF_CONSTEXPR StatusParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatusParam(const StatusParam& from);
  StatusParam(StatusParam&& from) noexcept
    : StatusParam() {
    *this = ::std::move(from);
  }

  inline StatusParam& operator=(const StatusParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusParam& operator=(StatusParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatusParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatusParam* internal_default_instance() {
    return reinterpret_cast<const StatusParam*>(
               &_StatusParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(StatusParam& a, StatusParam& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatusParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatusParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatusParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StatusParam& from) {
    StatusParam::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StatusParam";
  }
  protected:
  explicit StatusParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusNameFieldNumber = 1,
  };
  // repeated string status_name = 1;
  int status_name_size() const;
  private:
  int _internal_status_name_size() const;
  public:
  void clear_status_name();
  const std::string& status_name(int index) const;
  std::string* mutable_status_name(int index);
  void set_status_name(int index, const std::string& value);
  void set_status_name(int index, std::string&& value);
  void set_status_name(int index, const char* value);
  void set_status_name(int index, const char* value, size_t size);
  std::string* add_status_name();
  void add_status_name(const std::string& value);
  void add_status_name(std::string&& value);
  void add_status_name(const char* value);
  void add_status_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& status_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_status_name();
  private:
  const std::string& _internal_status_name(int index) const;
  std::string* _internal_add_status_name();
  public:

  // @@protoc_insertion_point(class_scope:StatusParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> status_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_WorkerRpcInterface_2eproto;
};
// ===================================================================

class WorkerService_Stub;

class WorkerService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline WorkerService() {};
 public:
  virtual ~WorkerService();

  typedef WorkerService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void fork(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ForkInput* request,
                       ::ForkEcho* response,
                       ::google::protobuf::Closure* done);
  virtual void shutdown(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ShutdownInput* request,
                       ::Echo* response,
                       ::google::protobuf::Closure* done);
  virtual void check(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CheckInput* request,
                       ::DownServices* response,
                       ::google::protobuf::Closure* done);
  virtual void getStatus(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::StatusParam* request,
                       ::StatusParam* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(WorkerService);
};

class WorkerService_Stub : public WorkerService {
 public:
  WorkerService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  WorkerService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~WorkerService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements WorkerService ------------------------------------------

  void fork(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ForkInput* request,
                       ::ForkEcho* response,
                       ::google::protobuf::Closure* done);
  void shutdown(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ShutdownInput* request,
                       ::Echo* response,
                       ::google::protobuf::Closure* done);
  void check(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CheckInput* request,
                       ::DownServices* response,
                       ::google::protobuf::Closure* done);
  void getStatus(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::StatusParam* request,
                       ::StatusParam* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(WorkerService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserServiceDescriptor

// string service = 1;
inline void UserServiceDescriptor::clear_service() {
  _impl_.service_.ClearToEmpty();
}
inline const std::string& UserServiceDescriptor::service() const {
  // @@protoc_insertion_point(field_get:UserServiceDescriptor.service)
  return _internal_service();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserServiceDescriptor::set_service(ArgT0&& arg0, ArgT... args) {
 
 _impl_.service_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UserServiceDescriptor.service)
}
inline std::string* UserServiceDescriptor::mutable_service() {
  std::string* _s = _internal_mutable_service();
  // @@protoc_insertion_point(field_mutable:UserServiceDescriptor.service)
  return _s;
}
inline const std::string& UserServiceDescriptor::_internal_service() const {
  return _impl_.service_.Get();
}
inline void UserServiceDescriptor::_internal_set_service(const std::string& value) {
  
  _impl_.service_.Set(value, GetArenaForAllocation());
}
inline std::string* UserServiceDescriptor::_internal_mutable_service() {
  
  return _impl_.service_.Mutable(GetArenaForAllocation());
}
inline std::string* UserServiceDescriptor::release_service() {
  // @@protoc_insertion_point(field_release:UserServiceDescriptor.service)
  return _impl_.service_.Release();
}
inline void UserServiceDescriptor::set_allocated_service(std::string* service) {
  if (service != nullptr) {
    
  } else {
    
  }
  _impl_.service_.SetAllocated(service, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.service_.IsDefault()) {
    _impl_.service_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UserServiceDescriptor.service)
}

// string alias = 2;
inline void UserServiceDescriptor::clear_alias() {
  _impl_.alias_.ClearToEmpty();
}
inline const std::string& UserServiceDescriptor::alias() const {
  // @@protoc_insertion_point(field_get:UserServiceDescriptor.alias)
  return _internal_alias();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserServiceDescriptor::set_alias(ArgT0&& arg0, ArgT... args) {
 
 _impl_.alias_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UserServiceDescriptor.alias)
}
inline std::string* UserServiceDescriptor::mutable_alias() {
  std::string* _s = _internal_mutable_alias();
  // @@protoc_insertion_point(field_mutable:UserServiceDescriptor.alias)
  return _s;
}
inline const std::string& UserServiceDescriptor::_internal_alias() const {
  return _impl_.alias_.Get();
}
inline void UserServiceDescriptor::_internal_set_alias(const std::string& value) {
  
  _impl_.alias_.Set(value, GetArenaForAllocation());
}
inline std::string* UserServiceDescriptor::_internal_mutable_alias() {
  
  return _impl_.alias_.Mutable(GetArenaForAllocation());
}
inline std::string* UserServiceDescriptor::release_alias() {
  // @@protoc_insertion_point(field_release:UserServiceDescriptor.alias)
  return _impl_.alias_.Release();
}
inline void UserServiceDescriptor::set_allocated_alias(std::string* alias) {
  if (alias != nullptr) {
    
  } else {
    
  }
  _impl_.alias_.SetAllocated(alias, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.alias_.IsDefault()) {
    _impl_.alias_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UserServiceDescriptor.alias)
}

// .ServiceType type = 3;
inline void UserServiceDescriptor::clear_type() {
  _impl_.type_ = 0;
}
inline ::ServiceType UserServiceDescriptor::_internal_type() const {
  return static_cast< ::ServiceType >(_impl_.type_);
}
inline ::ServiceType UserServiceDescriptor::type() const {
  // @@protoc_insertion_point(field_get:UserServiceDescriptor.type)
  return _internal_type();
}
inline void UserServiceDescriptor::_internal_set_type(::ServiceType value) {
  
  _impl_.type_ = value;
}
inline void UserServiceDescriptor::set_type(::ServiceType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:UserServiceDescriptor.type)
}

// -------------------------------------------------------------------

// ForkInput

// string service = 1;
inline void ForkInput::clear_service() {
  _impl_.service_.ClearToEmpty();
}
inline const std::string& ForkInput::service() const {
  // @@protoc_insertion_point(field_get:ForkInput.service)
  return _internal_service();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ForkInput::set_service(ArgT0&& arg0, ArgT... args) {
 
 _impl_.service_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ForkInput.service)
}
inline std::string* ForkInput::mutable_service() {
  std::string* _s = _internal_mutable_service();
  // @@protoc_insertion_point(field_mutable:ForkInput.service)
  return _s;
}
inline const std::string& ForkInput::_internal_service() const {
  return _impl_.service_.Get();
}
inline void ForkInput::_internal_set_service(const std::string& value) {
  
  _impl_.service_.Set(value, GetArenaForAllocation());
}
inline std::string* ForkInput::_internal_mutable_service() {
  
  return _impl_.service_.Mutable(GetArenaForAllocation());
}
inline std::string* ForkInput::release_service() {
  // @@protoc_insertion_point(field_release:ForkInput.service)
  return _impl_.service_.Release();
}
inline void ForkInput::set_allocated_service(std::string* service) {
  if (service != nullptr) {
    
  } else {
    
  }
  _impl_.service_.SetAllocated(service, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.service_.IsDefault()) {
    _impl_.service_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ForkInput.service)
}

// string owner = 2;
inline void ForkInput::clear_owner() {
  _impl_.owner_.ClearToEmpty();
}
inline const std::string& ForkInput::owner() const {
  // @@protoc_insertion_point(field_get:ForkInput.owner)
  return _internal_owner();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ForkInput::set_owner(ArgT0&& arg0, ArgT... args) {
 
 _impl_.owner_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ForkInput.owner)
}
inline std::string* ForkInput::mutable_owner() {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:ForkInput.owner)
  return _s;
}
inline const std::string& ForkInput::_internal_owner() const {
  return _impl_.owner_.Get();
}
inline void ForkInput::_internal_set_owner(const std::string& value) {
  
  _impl_.owner_.Set(value, GetArenaForAllocation());
}
inline std::string* ForkInput::_internal_mutable_owner() {
  
  return _impl_.owner_.Mutable(GetArenaForAllocation());
}
inline std::string* ForkInput::release_owner() {
  // @@protoc_insertion_point(field_release:ForkInput.owner)
  return _impl_.owner_.Release();
}
inline void ForkInput::set_allocated_owner(std::string* owner) {
  if (owner != nullptr) {
    
  } else {
    
  }
  _impl_.owner_.SetAllocated(owner, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.owner_.IsDefault()) {
    _impl_.owner_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ForkInput.owner)
}

// .ServiceType type = 3;
inline void ForkInput::clear_type() {
  _impl_.type_ = 0;
}
inline ::ServiceType ForkInput::_internal_type() const {
  return static_cast< ::ServiceType >(_impl_.type_);
}
inline ::ServiceType ForkInput::type() const {
  // @@protoc_insertion_point(field_get:ForkInput.type)
  return _internal_type();
}
inline void ForkInput::_internal_set_type(::ServiceType value) {
  
  _impl_.type_ = value;
}
inline void ForkInput::set_type(::ServiceType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ForkInput.type)
}

// string alias = 4;
inline void ForkInput::clear_alias() {
  _impl_.alias_.ClearToEmpty();
}
inline const std::string& ForkInput::alias() const {
  // @@protoc_insertion_point(field_get:ForkInput.alias)
  return _internal_alias();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ForkInput::set_alias(ArgT0&& arg0, ArgT... args) {
 
 _impl_.alias_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ForkInput.alias)
}
inline std::string* ForkInput::mutable_alias() {
  std::string* _s = _internal_mutable_alias();
  // @@protoc_insertion_point(field_mutable:ForkInput.alias)
  return _s;
}
inline const std::string& ForkInput::_internal_alias() const {
  return _impl_.alias_.Get();
}
inline void ForkInput::_internal_set_alias(const std::string& value) {
  
  _impl_.alias_.Set(value, GetArenaForAllocation());
}
inline std::string* ForkInput::_internal_mutable_alias() {
  
  return _impl_.alias_.Mutable(GetArenaForAllocation());
}
inline std::string* ForkInput::release_alias() {
  // @@protoc_insertion_point(field_release:ForkInput.alias)
  return _impl_.alias_.Release();
}
inline void ForkInput::set_allocated_alias(std::string* alias) {
  if (alias != nullptr) {
    
  } else {
    
  }
  _impl_.alias_.SetAllocated(alias, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.alias_.IsDefault()) {
    _impl_.alias_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ForkInput.alias)
}

// repeated string exe_params = 5;
inline int ForkInput::_internal_exe_params_size() const {
  return _impl_.exe_params_.size();
}
inline int ForkInput::exe_params_size() const {
  return _internal_exe_params_size();
}
inline void ForkInput::clear_exe_params() {
  _impl_.exe_params_.Clear();
}
inline std::string* ForkInput::add_exe_params() {
  std::string* _s = _internal_add_exe_params();
  // @@protoc_insertion_point(field_add_mutable:ForkInput.exe_params)
  return _s;
}
inline const std::string& ForkInput::_internal_exe_params(int index) const {
  return _impl_.exe_params_.Get(index);
}
inline const std::string& ForkInput::exe_params(int index) const {
  // @@protoc_insertion_point(field_get:ForkInput.exe_params)
  return _internal_exe_params(index);
}
inline std::string* ForkInput::mutable_exe_params(int index) {
  // @@protoc_insertion_point(field_mutable:ForkInput.exe_params)
  return _impl_.exe_params_.Mutable(index);
}
inline void ForkInput::set_exe_params(int index, const std::string& value) {
  _impl_.exe_params_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ForkInput.exe_params)
}
inline void ForkInput::set_exe_params(int index, std::string&& value) {
  _impl_.exe_params_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ForkInput.exe_params)
}
inline void ForkInput::set_exe_params(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.exe_params_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ForkInput.exe_params)
}
inline void ForkInput::set_exe_params(int index, const char* value, size_t size) {
  _impl_.exe_params_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ForkInput.exe_params)
}
inline std::string* ForkInput::_internal_add_exe_params() {
  return _impl_.exe_params_.Add();
}
inline void ForkInput::add_exe_params(const std::string& value) {
  _impl_.exe_params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ForkInput.exe_params)
}
inline void ForkInput::add_exe_params(std::string&& value) {
  _impl_.exe_params_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ForkInput.exe_params)
}
inline void ForkInput::add_exe_params(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.exe_params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ForkInput.exe_params)
}
inline void ForkInput::add_exe_params(const char* value, size_t size) {
  _impl_.exe_params_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ForkInput.exe_params)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ForkInput::exe_params() const {
  // @@protoc_insertion_point(field_list:ForkInput.exe_params)
  return _impl_.exe_params_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ForkInput::mutable_exe_params() {
  // @@protoc_insertion_point(field_mutable_list:ForkInput.exe_params)
  return &_impl_.exe_params_;
}

// repeated string docker_params = 6;
inline int ForkInput::_internal_docker_params_size() const {
  return _impl_.docker_params_.size();
}
inline int ForkInput::docker_params_size() const {
  return _internal_docker_params_size();
}
inline void ForkInput::clear_docker_params() {
  _impl_.docker_params_.Clear();
}
inline std::string* ForkInput::add_docker_params() {
  std::string* _s = _internal_add_docker_params();
  // @@protoc_insertion_point(field_add_mutable:ForkInput.docker_params)
  return _s;
}
inline const std::string& ForkInput::_internal_docker_params(int index) const {
  return _impl_.docker_params_.Get(index);
}
inline const std::string& ForkInput::docker_params(int index) const {
  // @@protoc_insertion_point(field_get:ForkInput.docker_params)
  return _internal_docker_params(index);
}
inline std::string* ForkInput::mutable_docker_params(int index) {
  // @@protoc_insertion_point(field_mutable:ForkInput.docker_params)
  return _impl_.docker_params_.Mutable(index);
}
inline void ForkInput::set_docker_params(int index, const std::string& value) {
  _impl_.docker_params_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ForkInput.docker_params)
}
inline void ForkInput::set_docker_params(int index, std::string&& value) {
  _impl_.docker_params_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ForkInput.docker_params)
}
inline void ForkInput::set_docker_params(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.docker_params_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ForkInput.docker_params)
}
inline void ForkInput::set_docker_params(int index, const char* value, size_t size) {
  _impl_.docker_params_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ForkInput.docker_params)
}
inline std::string* ForkInput::_internal_add_docker_params() {
  return _impl_.docker_params_.Add();
}
inline void ForkInput::add_docker_params(const std::string& value) {
  _impl_.docker_params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ForkInput.docker_params)
}
inline void ForkInput::add_docker_params(std::string&& value) {
  _impl_.docker_params_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ForkInput.docker_params)
}
inline void ForkInput::add_docker_params(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.docker_params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ForkInput.docker_params)
}
inline void ForkInput::add_docker_params(const char* value, size_t size) {
  _impl_.docker_params_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ForkInput.docker_params)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ForkInput::docker_params() const {
  // @@protoc_insertion_point(field_list:ForkInput.docker_params)
  return _impl_.docker_params_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ForkInput::mutable_docker_params() {
  // @@protoc_insertion_point(field_mutable_list:ForkInput.docker_params)
  return &_impl_.docker_params_;
}

// int32 restart = 7;
inline void ForkInput::clear_restart() {
  _impl_.restart_ = 0;
}
inline int32_t ForkInput::_internal_restart() const {
  return _impl_.restart_;
}
inline int32_t ForkInput::restart() const {
  // @@protoc_insertion_point(field_get:ForkInput.restart)
  return _internal_restart();
}
inline void ForkInput::_internal_set_restart(int32_t value) {
  
  _impl_.restart_ = value;
}
inline void ForkInput::set_restart(int32_t value) {
  _internal_set_restart(value);
  // @@protoc_insertion_point(field_set:ForkInput.restart)
}

// int32 port = 8;
inline void ForkInput::clear_port() {
  _impl_.port_ = 0;
}
inline int32_t ForkInput::_internal_port() const {
  return _impl_.port_;
}
inline int32_t ForkInput::port() const {
  // @@protoc_insertion_point(field_get:ForkInput.port)
  return _internal_port();
}
inline void ForkInput::_internal_set_port(int32_t value) {
  
  _impl_.port_ = value;
}
inline void ForkInput::set_port(int32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:ForkInput.port)
}

// -------------------------------------------------------------------

// ForkEcho

// .UserServiceDescriptor sd = 1;
inline bool ForkEcho::_internal_has_sd() const {
  return this != internal_default_instance() && _impl_.sd_ != nullptr;
}
inline bool ForkEcho::has_sd() const {
  return _internal_has_sd();
}
inline void ForkEcho::clear_sd() {
  if (GetArenaForAllocation() == nullptr && _impl_.sd_ != nullptr) {
    delete _impl_.sd_;
  }
  _impl_.sd_ = nullptr;
}
inline const ::UserServiceDescriptor& ForkEcho::_internal_sd() const {
  const ::UserServiceDescriptor* p = _impl_.sd_;
  return p != nullptr ? *p : reinterpret_cast<const ::UserServiceDescriptor&>(
      ::_UserServiceDescriptor_default_instance_);
}
inline const ::UserServiceDescriptor& ForkEcho::sd() const {
  // @@protoc_insertion_point(field_get:ForkEcho.sd)
  return _internal_sd();
}
inline void ForkEcho::unsafe_arena_set_allocated_sd(
    ::UserServiceDescriptor* sd) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sd_);
  }
  _impl_.sd_ = sd;
  if (sd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ForkEcho.sd)
}
inline ::UserServiceDescriptor* ForkEcho::release_sd() {
  
  ::UserServiceDescriptor* temp = _impl_.sd_;
  _impl_.sd_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::UserServiceDescriptor* ForkEcho::unsafe_arena_release_sd() {
  // @@protoc_insertion_point(field_release:ForkEcho.sd)
  
  ::UserServiceDescriptor* temp = _impl_.sd_;
  _impl_.sd_ = nullptr;
  return temp;
}
inline ::UserServiceDescriptor* ForkEcho::_internal_mutable_sd() {
  
  if (_impl_.sd_ == nullptr) {
    auto* p = CreateMaybeMessage<::UserServiceDescriptor>(GetArenaForAllocation());
    _impl_.sd_ = p;
  }
  return _impl_.sd_;
}
inline ::UserServiceDescriptor* ForkEcho::mutable_sd() {
  ::UserServiceDescriptor* _msg = _internal_mutable_sd();
  // @@protoc_insertion_point(field_mutable:ForkEcho.sd)
  return _msg;
}
inline void ForkEcho::set_allocated_sd(::UserServiceDescriptor* sd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.sd_;
  }
  if (sd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sd);
    if (message_arena != submessage_arena) {
      sd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sd, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sd_ = sd;
  // @@protoc_insertion_point(field_set_allocated:ForkEcho.sd)
}

// bool fail = 2;
inline void ForkEcho::clear_fail() {
  _impl_.fail_ = false;
}
inline bool ForkEcho::_internal_fail() const {
  return _impl_.fail_;
}
inline bool ForkEcho::fail() const {
  // @@protoc_insertion_point(field_get:ForkEcho.fail)
  return _internal_fail();
}
inline void ForkEcho::_internal_set_fail(bool value) {
  
  _impl_.fail_ = value;
}
inline void ForkEcho::set_fail(bool value) {
  _internal_set_fail(value);
  // @@protoc_insertion_point(field_set:ForkEcho.fail)
}

// string error_text = 3;
inline void ForkEcho::clear_error_text() {
  _impl_.error_text_.ClearToEmpty();
}
inline const std::string& ForkEcho::error_text() const {
  // @@protoc_insertion_point(field_get:ForkEcho.error_text)
  return _internal_error_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ForkEcho::set_error_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ForkEcho.error_text)
}
inline std::string* ForkEcho::mutable_error_text() {
  std::string* _s = _internal_mutable_error_text();
  // @@protoc_insertion_point(field_mutable:ForkEcho.error_text)
  return _s;
}
inline const std::string& ForkEcho::_internal_error_text() const {
  return _impl_.error_text_.Get();
}
inline void ForkEcho::_internal_set_error_text(const std::string& value) {
  
  _impl_.error_text_.Set(value, GetArenaForAllocation());
}
inline std::string* ForkEcho::_internal_mutable_error_text() {
  
  return _impl_.error_text_.Mutable(GetArenaForAllocation());
}
inline std::string* ForkEcho::release_error_text() {
  // @@protoc_insertion_point(field_release:ForkEcho.error_text)
  return _impl_.error_text_.Release();
}
inline void ForkEcho::set_allocated_error_text(std::string* error_text) {
  if (error_text != nullptr) {
    
  } else {
    
  }
  _impl_.error_text_.SetAllocated(error_text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_text_.IsDefault()) {
    _impl_.error_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ForkEcho.error_text)
}

// -------------------------------------------------------------------

// ShutdownInput

// .UserServiceDescriptor sd = 1;
inline bool ShutdownInput::_internal_has_sd() const {
  return this != internal_default_instance() && _impl_.sd_ != nullptr;
}
inline bool ShutdownInput::has_sd() const {
  return _internal_has_sd();
}
inline void ShutdownInput::clear_sd() {
  if (GetArenaForAllocation() == nullptr && _impl_.sd_ != nullptr) {
    delete _impl_.sd_;
  }
  _impl_.sd_ = nullptr;
}
inline const ::UserServiceDescriptor& ShutdownInput::_internal_sd() const {
  const ::UserServiceDescriptor* p = _impl_.sd_;
  return p != nullptr ? *p : reinterpret_cast<const ::UserServiceDescriptor&>(
      ::_UserServiceDescriptor_default_instance_);
}
inline const ::UserServiceDescriptor& ShutdownInput::sd() const {
  // @@protoc_insertion_point(field_get:ShutdownInput.sd)
  return _internal_sd();
}
inline void ShutdownInput::unsafe_arena_set_allocated_sd(
    ::UserServiceDescriptor* sd) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sd_);
  }
  _impl_.sd_ = sd;
  if (sd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ShutdownInput.sd)
}
inline ::UserServiceDescriptor* ShutdownInput::release_sd() {
  
  ::UserServiceDescriptor* temp = _impl_.sd_;
  _impl_.sd_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::UserServiceDescriptor* ShutdownInput::unsafe_arena_release_sd() {
  // @@protoc_insertion_point(field_release:ShutdownInput.sd)
  
  ::UserServiceDescriptor* temp = _impl_.sd_;
  _impl_.sd_ = nullptr;
  return temp;
}
inline ::UserServiceDescriptor* ShutdownInput::_internal_mutable_sd() {
  
  if (_impl_.sd_ == nullptr) {
    auto* p = CreateMaybeMessage<::UserServiceDescriptor>(GetArenaForAllocation());
    _impl_.sd_ = p;
  }
  return _impl_.sd_;
}
inline ::UserServiceDescriptor* ShutdownInput::mutable_sd() {
  ::UserServiceDescriptor* _msg = _internal_mutable_sd();
  // @@protoc_insertion_point(field_mutable:ShutdownInput.sd)
  return _msg;
}
inline void ShutdownInput::set_allocated_sd(::UserServiceDescriptor* sd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.sd_;
  }
  if (sd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sd);
    if (message_arena != submessage_arena) {
      sd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sd, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sd_ = sd;
  // @@protoc_insertion_point(field_set_allocated:ShutdownInput.sd)
}

// string user_info = 2;
inline void ShutdownInput::clear_user_info() {
  _impl_.user_info_.ClearToEmpty();
}
inline const std::string& ShutdownInput::user_info() const {
  // @@protoc_insertion_point(field_get:ShutdownInput.user_info)
  return _internal_user_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ShutdownInput::set_user_info(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_info_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ShutdownInput.user_info)
}
inline std::string* ShutdownInput::mutable_user_info() {
  std::string* _s = _internal_mutable_user_info();
  // @@protoc_insertion_point(field_mutable:ShutdownInput.user_info)
  return _s;
}
inline const std::string& ShutdownInput::_internal_user_info() const {
  return _impl_.user_info_.Get();
}
inline void ShutdownInput::_internal_set_user_info(const std::string& value) {
  
  _impl_.user_info_.Set(value, GetArenaForAllocation());
}
inline std::string* ShutdownInput::_internal_mutable_user_info() {
  
  return _impl_.user_info_.Mutable(GetArenaForAllocation());
}
inline std::string* ShutdownInput::release_user_info() {
  // @@protoc_insertion_point(field_release:ShutdownInput.user_info)
  return _impl_.user_info_.Release();
}
inline void ShutdownInput::set_allocated_user_info(std::string* user_info) {
  if (user_info != nullptr) {
    
  } else {
    
  }
  _impl_.user_info_.SetAllocated(user_info, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_info_.IsDefault()) {
    _impl_.user_info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ShutdownInput.user_info)
}

// -------------------------------------------------------------------

// Echo

// bool fail = 1;
inline void Echo::clear_fail() {
  _impl_.fail_ = false;
}
inline bool Echo::_internal_fail() const {
  return _impl_.fail_;
}
inline bool Echo::fail() const {
  // @@protoc_insertion_point(field_get:Echo.fail)
  return _internal_fail();
}
inline void Echo::_internal_set_fail(bool value) {
  
  _impl_.fail_ = value;
}
inline void Echo::set_fail(bool value) {
  _internal_set_fail(value);
  // @@protoc_insertion_point(field_set:Echo.fail)
}

// string error_text = 2;
inline void Echo::clear_error_text() {
  _impl_.error_text_.ClearToEmpty();
}
inline const std::string& Echo::error_text() const {
  // @@protoc_insertion_point(field_get:Echo.error_text)
  return _internal_error_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Echo::set_error_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Echo.error_text)
}
inline std::string* Echo::mutable_error_text() {
  std::string* _s = _internal_mutable_error_text();
  // @@protoc_insertion_point(field_mutable:Echo.error_text)
  return _s;
}
inline const std::string& Echo::_internal_error_text() const {
  return _impl_.error_text_.Get();
}
inline void Echo::_internal_set_error_text(const std::string& value) {
  
  _impl_.error_text_.Set(value, GetArenaForAllocation());
}
inline std::string* Echo::_internal_mutable_error_text() {
  
  return _impl_.error_text_.Mutable(GetArenaForAllocation());
}
inline std::string* Echo::release_error_text() {
  // @@protoc_insertion_point(field_release:Echo.error_text)
  return _impl_.error_text_.Release();
}
inline void Echo::set_allocated_error_text(std::string* error_text) {
  if (error_text != nullptr) {
    
  } else {
    
  }
  _impl_.error_text_.SetAllocated(error_text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_text_.IsDefault()) {
    _impl_.error_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Echo.error_text)
}

// -------------------------------------------------------------------

// CheckInput

// string user_info = 1;
inline void CheckInput::clear_user_info() {
  _impl_.user_info_.ClearToEmpty();
}
inline const std::string& CheckInput::user_info() const {
  // @@protoc_insertion_point(field_get:CheckInput.user_info)
  return _internal_user_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CheckInput::set_user_info(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_info_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CheckInput.user_info)
}
inline std::string* CheckInput::mutable_user_info() {
  std::string* _s = _internal_mutable_user_info();
  // @@protoc_insertion_point(field_mutable:CheckInput.user_info)
  return _s;
}
inline const std::string& CheckInput::_internal_user_info() const {
  return _impl_.user_info_.Get();
}
inline void CheckInput::_internal_set_user_info(const std::string& value) {
  
  _impl_.user_info_.Set(value, GetArenaForAllocation());
}
inline std::string* CheckInput::_internal_mutable_user_info() {
  
  return _impl_.user_info_.Mutable(GetArenaForAllocation());
}
inline std::string* CheckInput::release_user_info() {
  // @@protoc_insertion_point(field_release:CheckInput.user_info)
  return _impl_.user_info_.Release();
}
inline void CheckInput::set_allocated_user_info(std::string* user_info) {
  if (user_info != nullptr) {
    
  } else {
    
  }
  _impl_.user_info_.SetAllocated(user_info, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_info_.IsDefault()) {
    _impl_.user_info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CheckInput.user_info)
}

// int32 line = 2;
inline void CheckInput::clear_line() {
  _impl_.line_ = 0;
}
inline int32_t CheckInput::_internal_line() const {
  return _impl_.line_;
}
inline int32_t CheckInput::line() const {
  // @@protoc_insertion_point(field_get:CheckInput.line)
  return _internal_line();
}
inline void CheckInput::_internal_set_line(int32_t value) {
  
  _impl_.line_ = value;
}
inline void CheckInput::set_line(int32_t value) {
  _internal_set_line(value);
  // @@protoc_insertion_point(field_set:CheckInput.line)
}

// -------------------------------------------------------------------

// DownService

// string error_text = 1;
inline void DownService::clear_error_text() {
  _impl_.error_text_.ClearToEmpty();
}
inline const std::string& DownService::error_text() const {
  // @@protoc_insertion_point(field_get:DownService.error_text)
  return _internal_error_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DownService::set_error_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DownService.error_text)
}
inline std::string* DownService::mutable_error_text() {
  std::string* _s = _internal_mutable_error_text();
  // @@protoc_insertion_point(field_mutable:DownService.error_text)
  return _s;
}
inline const std::string& DownService::_internal_error_text() const {
  return _impl_.error_text_.Get();
}
inline void DownService::_internal_set_error_text(const std::string& value) {
  
  _impl_.error_text_.Set(value, GetArenaForAllocation());
}
inline std::string* DownService::_internal_mutable_error_text() {
  
  return _impl_.error_text_.Mutable(GetArenaForAllocation());
}
inline std::string* DownService::release_error_text() {
  // @@protoc_insertion_point(field_release:DownService.error_text)
  return _impl_.error_text_.Release();
}
inline void DownService::set_allocated_error_text(std::string* error_text) {
  if (error_text != nullptr) {
    
  } else {
    
  }
  _impl_.error_text_.SetAllocated(error_text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_text_.IsDefault()) {
    _impl_.error_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DownService.error_text)
}

// int32 exit_num = 2;
inline void DownService::clear_exit_num() {
  _impl_.exit_num_ = 0;
}
inline int32_t DownService::_internal_exit_num() const {
  return _impl_.exit_num_;
}
inline int32_t DownService::exit_num() const {
  // @@protoc_insertion_point(field_get:DownService.exit_num)
  return _internal_exit_num();
}
inline void DownService::_internal_set_exit_num(int32_t value) {
  
  _impl_.exit_num_ = value;
}
inline void DownService::set_exit_num(int32_t value) {
  _internal_set_exit_num(value);
  // @@protoc_insertion_point(field_set:DownService.exit_num)
}

// string alias = 3;
inline void DownService::clear_alias() {
  _impl_.alias_.ClearToEmpty();
}
inline const std::string& DownService::alias() const {
  // @@protoc_insertion_point(field_get:DownService.alias)
  return _internal_alias();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DownService::set_alias(ArgT0&& arg0, ArgT... args) {
 
 _impl_.alias_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DownService.alias)
}
inline std::string* DownService::mutable_alias() {
  std::string* _s = _internal_mutable_alias();
  // @@protoc_insertion_point(field_mutable:DownService.alias)
  return _s;
}
inline const std::string& DownService::_internal_alias() const {
  return _impl_.alias_.Get();
}
inline void DownService::_internal_set_alias(const std::string& value) {
  
  _impl_.alias_.Set(value, GetArenaForAllocation());
}
inline std::string* DownService::_internal_mutable_alias() {
  
  return _impl_.alias_.Mutable(GetArenaForAllocation());
}
inline std::string* DownService::release_alias() {
  // @@protoc_insertion_point(field_release:DownService.alias)
  return _impl_.alias_.Release();
}
inline void DownService::set_allocated_alias(std::string* alias) {
  if (alias != nullptr) {
    
  } else {
    
  }
  _impl_.alias_.SetAllocated(alias, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.alias_.IsDefault()) {
    _impl_.alias_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DownService.alias)
}

// string out_file = 4;
inline void DownService::clear_out_file() {
  _impl_.out_file_.ClearToEmpty();
}
inline const std::string& DownService::out_file() const {
  // @@protoc_insertion_point(field_get:DownService.out_file)
  return _internal_out_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DownService::set_out_file(ArgT0&& arg0, ArgT... args) {
 
 _impl_.out_file_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DownService.out_file)
}
inline std::string* DownService::mutable_out_file() {
  std::string* _s = _internal_mutable_out_file();
  // @@protoc_insertion_point(field_mutable:DownService.out_file)
  return _s;
}
inline const std::string& DownService::_internal_out_file() const {
  return _impl_.out_file_.Get();
}
inline void DownService::_internal_set_out_file(const std::string& value) {
  
  _impl_.out_file_.Set(value, GetArenaForAllocation());
}
inline std::string* DownService::_internal_mutable_out_file() {
  
  return _impl_.out_file_.Mutable(GetArenaForAllocation());
}
inline std::string* DownService::release_out_file() {
  // @@protoc_insertion_point(field_release:DownService.out_file)
  return _impl_.out_file_.Release();
}
inline void DownService::set_allocated_out_file(std::string* out_file) {
  if (out_file != nullptr) {
    
  } else {
    
  }
  _impl_.out_file_.SetAllocated(out_file, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.out_file_.IsDefault()) {
    _impl_.out_file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DownService.out_file)
}

// -------------------------------------------------------------------

// DownServices

// repeated .DownService service = 1;
inline int DownServices::_internal_service_size() const {
  return _impl_.service_.size();
}
inline int DownServices::service_size() const {
  return _internal_service_size();
}
inline void DownServices::clear_service() {
  _impl_.service_.Clear();
}
inline ::DownService* DownServices::mutable_service(int index) {
  // @@protoc_insertion_point(field_mutable:DownServices.service)
  return _impl_.service_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DownService >*
DownServices::mutable_service() {
  // @@protoc_insertion_point(field_mutable_list:DownServices.service)
  return &_impl_.service_;
}
inline const ::DownService& DownServices::_internal_service(int index) const {
  return _impl_.service_.Get(index);
}
inline const ::DownService& DownServices::service(int index) const {
  // @@protoc_insertion_point(field_get:DownServices.service)
  return _internal_service(index);
}
inline ::DownService* DownServices::_internal_add_service() {
  return _impl_.service_.Add();
}
inline ::DownService* DownServices::add_service() {
  ::DownService* _add = _internal_add_service();
  // @@protoc_insertion_point(field_add:DownServices.service)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DownService >&
DownServices::service() const {
  // @@protoc_insertion_point(field_list:DownServices.service)
  return _impl_.service_;
}

// -------------------------------------------------------------------

// StatusParam

// repeated string status_name = 1;
inline int StatusParam::_internal_status_name_size() const {
  return _impl_.status_name_.size();
}
inline int StatusParam::status_name_size() const {
  return _internal_status_name_size();
}
inline void StatusParam::clear_status_name() {
  _impl_.status_name_.Clear();
}
inline std::string* StatusParam::add_status_name() {
  std::string* _s = _internal_add_status_name();
  // @@protoc_insertion_point(field_add_mutable:StatusParam.status_name)
  return _s;
}
inline const std::string& StatusParam::_internal_status_name(int index) const {
  return _impl_.status_name_.Get(index);
}
inline const std::string& StatusParam::status_name(int index) const {
  // @@protoc_insertion_point(field_get:StatusParam.status_name)
  return _internal_status_name(index);
}
inline std::string* StatusParam::mutable_status_name(int index) {
  // @@protoc_insertion_point(field_mutable:StatusParam.status_name)
  return _impl_.status_name_.Mutable(index);
}
inline void StatusParam::set_status_name(int index, const std::string& value) {
  _impl_.status_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:StatusParam.status_name)
}
inline void StatusParam::set_status_name(int index, std::string&& value) {
  _impl_.status_name_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:StatusParam.status_name)
}
inline void StatusParam::set_status_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.status_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:StatusParam.status_name)
}
inline void StatusParam::set_status_name(int index, const char* value, size_t size) {
  _impl_.status_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StatusParam.status_name)
}
inline std::string* StatusParam::_internal_add_status_name() {
  return _impl_.status_name_.Add();
}
inline void StatusParam::add_status_name(const std::string& value) {
  _impl_.status_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:StatusParam.status_name)
}
inline void StatusParam::add_status_name(std::string&& value) {
  _impl_.status_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:StatusParam.status_name)
}
inline void StatusParam::add_status_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.status_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:StatusParam.status_name)
}
inline void StatusParam::add_status_name(const char* value, size_t size) {
  _impl_.status_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:StatusParam.status_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StatusParam::status_name() const {
  // @@protoc_insertion_point(field_list:StatusParam.status_name)
  return _impl_.status_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StatusParam::mutable_status_name() {
  // @@protoc_insertion_point(field_mutable_list:StatusParam.status_name)
  return &_impl_.status_name_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ServiceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ServiceType>() {
  return ::ServiceType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_WorkerRpcInterface_2eproto
