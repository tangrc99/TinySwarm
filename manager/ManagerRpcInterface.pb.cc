// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ManagerRpcInterface.proto

#include "ManagerRpcInterface.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR ServiceName::ServiceName(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServiceNameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServiceNameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServiceNameDefaultTypeInternal() {}
  union {
    ServiceName _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServiceNameDefaultTypeInternal _ServiceName_default_instance_;
PROTOBUF_CONSTEXPR ServiceParams::ServiceParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.exe_params_)*/{}
  , /*decltype(_impl_.docker_params_)*/{}
  , /*decltype(_impl_.service_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.service_num_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.restart_)*/0
  , /*decltype(_impl_.port_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServiceParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServiceParamsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServiceParamsDefaultTypeInternal() {}
  union {
    ServiceParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServiceParamsDefaultTypeInternal _ServiceParams_default_instance_;
PROTOBUF_CONSTEXPR ServiceInfo::ServiceInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/nullptr
  , /*decltype(_impl_.params_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServiceInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServiceInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServiceInfoDefaultTypeInternal() {}
  union {
    ServiceInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServiceInfoDefaultTypeInternal _ServiceInfo_default_instance_;
PROTOBUF_CONSTEXPR JsonMessage::JsonMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct JsonMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JsonMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JsonMessageDefaultTypeInternal() {}
  union {
    JsonMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JsonMessageDefaultTypeInternal _JsonMessage_default_instance_;
PROTOBUF_CONSTEXPR AddressPool::AddressPool(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pod_address_)*/{}
  , /*decltype(_impl_.proxy_address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AddressPoolDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddressPoolDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddressPoolDefaultTypeInternal() {}
  union {
    AddressPool _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddressPoolDefaultTypeInternal _AddressPool_default_instance_;
static ::_pb::Metadata file_level_metadata_ManagerRpcInterface_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_ManagerRpcInterface_2eproto = nullptr;
static const ::_pb::ServiceDescriptor* file_level_service_descriptors_ManagerRpcInterface_2eproto[1];

const uint32_t TableStruct_ManagerRpcInterface_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServiceName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ServiceName, _impl_.token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServiceParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ServiceParams, _impl_.service_num_),
  PROTOBUF_FIELD_OFFSET(::ServiceParams, _impl_.service_),
  PROTOBUF_FIELD_OFFSET(::ServiceParams, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::ServiceParams, _impl_.exe_params_),
  PROTOBUF_FIELD_OFFSET(::ServiceParams, _impl_.docker_params_),
  PROTOBUF_FIELD_OFFSET(::ServiceParams, _impl_.restart_),
  PROTOBUF_FIELD_OFFSET(::ServiceParams, _impl_.port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServiceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ServiceInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::ServiceInfo, _impl_.params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JsonMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::JsonMessage, _impl_.content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AddressPool, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AddressPool, _impl_.proxy_address_),
  PROTOBUF_FIELD_OFFSET(::AddressPool, _impl_.pod_address_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ServiceName)},
  { 7, -1, -1, sizeof(::ServiceParams)},
  { 20, -1, -1, sizeof(::ServiceInfo)},
  { 28, -1, -1, sizeof(::JsonMessage)},
  { 35, -1, -1, sizeof(::AddressPool)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_ServiceName_default_instance_._instance,
  &::_ServiceParams_default_instance_._instance,
  &::_ServiceInfo_default_instance_._instance,
  &::_JsonMessage_default_instance_._instance,
  &::_AddressPool_default_instance_._instance,
};

const char descriptor_table_protodef_ManagerRpcInterface_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031ManagerRpcInterface.proto\"\034\n\013ServiceNa"
  "me\022\r\n\005token\030\001 \001(\t\"\215\001\n\rServiceParams\022\023\n\013s"
  "ervice_num\030\001 \001(\005\022\017\n\007service\030\002 \001(\t\022\014\n\004typ"
  "e\030\003 \001(\005\022\022\n\nexe_params\030\004 \003(\t\022\025\n\rdocker_pa"
  "rams\030\005 \003(\t\022\017\n\007restart\030\006 \001(\005\022\014\n\004port\030\007 \001("
  "\005\"I\n\013ServiceInfo\022\032\n\004name\030\001 \001(\0132\014.Service"
  "Name\022\036\n\006params\030\002 \001(\0132\016.ServiceParams\"\036\n\013"
  "JsonMessage\022\017\n\007content\030\001 \001(\t\"9\n\013AddressP"
  "ool\022\025\n\rproxy_address\030\001 \001(\t\022\023\n\013pod_addres"
  "s\030\002 \003(\t2\304\001\n\016ManagerService\022+\n\rcreateServ"
  "ice\022\014.ServiceInfo\032\014.JsonMessage\022,\n\016getSe"
  "rviceInfo\022\014.ServiceName\032\014.JsonMessage\022,\n"
  "\016getAddressPool\022\014.ServiceName\032\014.AddressP"
  "ool\022)\n\013stopService\022\014.ServiceName\032\014.Servi"
  "ceNameB\003\200\001\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_ManagerRpcInterface_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ManagerRpcInterface_2eproto = {
    false, false, 579, descriptor_table_protodef_ManagerRpcInterface_2eproto,
    "ManagerRpcInterface.proto",
    &descriptor_table_ManagerRpcInterface_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_ManagerRpcInterface_2eproto::offsets,
    file_level_metadata_ManagerRpcInterface_2eproto, file_level_enum_descriptors_ManagerRpcInterface_2eproto,
    file_level_service_descriptors_ManagerRpcInterface_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ManagerRpcInterface_2eproto_getter() {
  return &descriptor_table_ManagerRpcInterface_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ManagerRpcInterface_2eproto(&descriptor_table_ManagerRpcInterface_2eproto);

// ===================================================================

class ServiceName::_Internal {
 public:
};

ServiceName::ServiceName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ServiceName)
}
ServiceName::ServiceName(const ServiceName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServiceName* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ServiceName)
}

inline void ServiceName::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ServiceName::~ServiceName() {
  // @@protoc_insertion_point(destructor:ServiceName)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServiceName::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.token_.Destroy();
}

void ServiceName::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServiceName::Clear() {
// @@protoc_insertion_point(message_clear_start:ServiceName)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceName::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServiceName.token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServiceName::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServiceName)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ServiceName.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServiceName)
  return target;
}

size_t ServiceName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServiceName)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServiceName::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServiceName::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServiceName::GetClassData() const { return &_class_data_; }


void ServiceName::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServiceName*>(&to_msg);
  auto& from = static_cast<const ServiceName&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServiceName)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_token().empty()) {
    _this->_internal_set_token(from._internal_token());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServiceName::CopyFrom(const ServiceName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServiceName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceName::IsInitialized() const {
  return true;
}

void ServiceName::InternalSwap(ServiceName* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceName::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ManagerRpcInterface_2eproto_getter, &descriptor_table_ManagerRpcInterface_2eproto_once,
      file_level_metadata_ManagerRpcInterface_2eproto[0]);
}

// ===================================================================

class ServiceParams::_Internal {
 public:
};

ServiceParams::ServiceParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ServiceParams)
}
ServiceParams::ServiceParams(const ServiceParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServiceParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.exe_params_){from._impl_.exe_params_}
    , decltype(_impl_.docker_params_){from._impl_.docker_params_}
    , decltype(_impl_.service_){}
    , decltype(_impl_.service_num_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.restart_){}
    , decltype(_impl_.port_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.service_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_service().empty()) {
    _this->_impl_.service_.Set(from._internal_service(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.service_num_, &from._impl_.service_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.port_) -
    reinterpret_cast<char*>(&_impl_.service_num_)) + sizeof(_impl_.port_));
  // @@protoc_insertion_point(copy_constructor:ServiceParams)
}

inline void ServiceParams::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.exe_params_){arena}
    , decltype(_impl_.docker_params_){arena}
    , decltype(_impl_.service_){}
    , decltype(_impl_.service_num_){0}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.restart_){0}
    , decltype(_impl_.port_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.service_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ServiceParams::~ServiceParams() {
  // @@protoc_insertion_point(destructor:ServiceParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServiceParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.exe_params_.~RepeatedPtrField();
  _impl_.docker_params_.~RepeatedPtrField();
  _impl_.service_.Destroy();
}

void ServiceParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServiceParams::Clear() {
// @@protoc_insertion_point(message_clear_start:ServiceParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.exe_params_.Clear();
  _impl_.docker_params_.Clear();
  _impl_.service_.ClearToEmpty();
  ::memset(&_impl_.service_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.port_) -
      reinterpret_cast<char*>(&_impl_.service_num_)) + sizeof(_impl_.port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 service_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.service_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string service = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_service();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServiceParams.service"));
        } else
          goto handle_unusual;
        continue;
      // int32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string exe_params = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_exe_params();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "ServiceParams.exe_params"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string docker_params = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_docker_params();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "ServiceParams.docker_params"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 restart = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.restart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 port = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServiceParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServiceParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 service_num = 1;
  if (this->_internal_service_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_service_num(), target);
  }

  // string service = 2;
  if (!this->_internal_service().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service().data(), static_cast<int>(this->_internal_service().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ServiceParams.service");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_service(), target);
  }

  // int32 type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_type(), target);
  }

  // repeated string exe_params = 4;
  for (int i = 0, n = this->_internal_exe_params_size(); i < n; i++) {
    const auto& s = this->_internal_exe_params(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ServiceParams.exe_params");
    target = stream->WriteString(4, s, target);
  }

  // repeated string docker_params = 5;
  for (int i = 0, n = this->_internal_docker_params_size(); i < n; i++) {
    const auto& s = this->_internal_docker_params(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ServiceParams.docker_params");
    target = stream->WriteString(5, s, target);
  }

  // int32 restart = 6;
  if (this->_internal_restart() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_restart(), target);
  }

  // int32 port = 7;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServiceParams)
  return target;
}

size_t ServiceParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServiceParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string exe_params = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.exe_params_.size());
  for (int i = 0, n = _impl_.exe_params_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.exe_params_.Get(i));
  }

  // repeated string docker_params = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.docker_params_.size());
  for (int i = 0, n = _impl_.docker_params_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.docker_params_.Get(i));
  }

  // string service = 2;
  if (!this->_internal_service().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service());
  }

  // int32 service_num = 1;
  if (this->_internal_service_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_service_num());
  }

  // int32 type = 3;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  // int32 restart = 6;
  if (this->_internal_restart() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_restart());
  }

  // int32 port = 7;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServiceParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServiceParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServiceParams::GetClassData() const { return &_class_data_; }


void ServiceParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServiceParams*>(&to_msg);
  auto& from = static_cast<const ServiceParams&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServiceParams)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.exe_params_.MergeFrom(from._impl_.exe_params_);
  _this->_impl_.docker_params_.MergeFrom(from._impl_.docker_params_);
  if (!from._internal_service().empty()) {
    _this->_internal_set_service(from._internal_service());
  }
  if (from._internal_service_num() != 0) {
    _this->_internal_set_service_num(from._internal_service_num());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_restart() != 0) {
    _this->_internal_set_restart(from._internal_restart());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServiceParams::CopyFrom(const ServiceParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServiceParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceParams::IsInitialized() const {
  return true;
}

void ServiceParams::InternalSwap(ServiceParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.exe_params_.InternalSwap(&other->_impl_.exe_params_);
  _impl_.docker_params_.InternalSwap(&other->_impl_.docker_params_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.service_, lhs_arena,
      &other->_impl_.service_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServiceParams, _impl_.port_)
      + sizeof(ServiceParams::_impl_.port_)
      - PROTOBUF_FIELD_OFFSET(ServiceParams, _impl_.service_num_)>(
          reinterpret_cast<char*>(&_impl_.service_num_),
          reinterpret_cast<char*>(&other->_impl_.service_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceParams::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ManagerRpcInterface_2eproto_getter, &descriptor_table_ManagerRpcInterface_2eproto_once,
      file_level_metadata_ManagerRpcInterface_2eproto[1]);
}

// ===================================================================

class ServiceInfo::_Internal {
 public:
  static const ::ServiceName& name(const ServiceInfo* msg);
  static const ::ServiceParams& params(const ServiceInfo* msg);
};

const ::ServiceName&
ServiceInfo::_Internal::name(const ServiceInfo* msg) {
  return *msg->_impl_.name_;
}
const ::ServiceParams&
ServiceInfo::_Internal::params(const ServiceInfo* msg) {
  return *msg->_impl_.params_;
}
ServiceInfo::ServiceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ServiceInfo)
}
ServiceInfo::ServiceInfo(const ServiceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServiceInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){nullptr}
    , decltype(_impl_.params_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_name()) {
    _this->_impl_.name_ = new ::ServiceName(*from._impl_.name_);
  }
  if (from._internal_has_params()) {
    _this->_impl_.params_ = new ::ServiceParams(*from._impl_.params_);
  }
  // @@protoc_insertion_point(copy_constructor:ServiceInfo)
}

inline void ServiceInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){nullptr}
    , decltype(_impl_.params_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServiceInfo::~ServiceInfo() {
  // @@protoc_insertion_point(destructor:ServiceInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServiceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.name_;
  if (this != internal_default_instance()) delete _impl_.params_;
}

void ServiceInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServiceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ServiceInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.name_ != nullptr) {
    delete _impl_.name_;
  }
  _impl_.name_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ServiceName name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_name(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ServiceParams params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServiceInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServiceInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ServiceName name = 1;
  if (this->_internal_has_name()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::name(this),
        _Internal::name(this).GetCachedSize(), target, stream);
  }

  // .ServiceParams params = 2;
  if (this->_internal_has_params()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::params(this),
        _Internal::params(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServiceInfo)
  return target;
}

size_t ServiceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServiceInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ServiceName name = 1;
  if (this->_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.name_);
  }

  // .ServiceParams params = 2;
  if (this->_internal_has_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.params_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServiceInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServiceInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServiceInfo::GetClassData() const { return &_class_data_; }


void ServiceInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServiceInfo*>(&to_msg);
  auto& from = static_cast<const ServiceInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServiceInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_name()) {
    _this->_internal_mutable_name()->::ServiceName::MergeFrom(
        from._internal_name());
  }
  if (from._internal_has_params()) {
    _this->_internal_mutable_params()->::ServiceParams::MergeFrom(
        from._internal_params());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServiceInfo::CopyFrom(const ServiceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServiceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceInfo::IsInitialized() const {
  return true;
}

void ServiceInfo::InternalSwap(ServiceInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServiceInfo, _impl_.params_)
      + sizeof(ServiceInfo::_impl_.params_)
      - PROTOBUF_FIELD_OFFSET(ServiceInfo, _impl_.name_)>(
          reinterpret_cast<char*>(&_impl_.name_),
          reinterpret_cast<char*>(&other->_impl_.name_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ManagerRpcInterface_2eproto_getter, &descriptor_table_ManagerRpcInterface_2eproto_once,
      file_level_metadata_ManagerRpcInterface_2eproto[2]);
}

// ===================================================================

class JsonMessage::_Internal {
 public:
};

JsonMessage::JsonMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:JsonMessage)
}
JsonMessage::JsonMessage(const JsonMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  JsonMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:JsonMessage)
}

inline void JsonMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

JsonMessage::~JsonMessage() {
  // @@protoc_insertion_point(destructor:JsonMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JsonMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_.Destroy();
}

void JsonMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void JsonMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:JsonMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.content_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JsonMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string content = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "JsonMessage.content"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JsonMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:JsonMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string content = 1;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JsonMessage.content");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JsonMessage)
  return target;
}

size_t JsonMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JsonMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string content = 1;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JsonMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    JsonMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JsonMessage::GetClassData() const { return &_class_data_; }


void JsonMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<JsonMessage*>(&to_msg);
  auto& from = static_cast<const JsonMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:JsonMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JsonMessage::CopyFrom(const JsonMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JsonMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JsonMessage::IsInitialized() const {
  return true;
}

void JsonMessage::InternalSwap(JsonMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata JsonMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ManagerRpcInterface_2eproto_getter, &descriptor_table_ManagerRpcInterface_2eproto_once,
      file_level_metadata_ManagerRpcInterface_2eproto[3]);
}

// ===================================================================

class AddressPool::_Internal {
 public:
};

AddressPool::AddressPool(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AddressPool)
}
AddressPool::AddressPool(const AddressPool& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AddressPool* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pod_address_){from._impl_.pod_address_}
    , decltype(_impl_.proxy_address_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.proxy_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.proxy_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proxy_address().empty()) {
    _this->_impl_.proxy_address_.Set(from._internal_proxy_address(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:AddressPool)
}

inline void AddressPool::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pod_address_){arena}
    , decltype(_impl_.proxy_address_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.proxy_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.proxy_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AddressPool::~AddressPool() {
  // @@protoc_insertion_point(destructor:AddressPool)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddressPool::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pod_address_.~RepeatedPtrField();
  _impl_.proxy_address_.Destroy();
}

void AddressPool::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AddressPool::Clear() {
// @@protoc_insertion_point(message_clear_start:AddressPool)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pod_address_.Clear();
  _impl_.proxy_address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddressPool::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string proxy_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_proxy_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AddressPool.proxy_address"));
        } else
          goto handle_unusual;
        continue;
      // repeated string pod_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_pod_address();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "AddressPool.pod_address"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddressPool::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AddressPool)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string proxy_address = 1;
  if (!this->_internal_proxy_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_proxy_address().data(), static_cast<int>(this->_internal_proxy_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AddressPool.proxy_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_proxy_address(), target);
  }

  // repeated string pod_address = 2;
  for (int i = 0, n = this->_internal_pod_address_size(); i < n; i++) {
    const auto& s = this->_internal_pod_address(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AddressPool.pod_address");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AddressPool)
  return target;
}

size_t AddressPool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AddressPool)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string pod_address = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.pod_address_.size());
  for (int i = 0, n = _impl_.pod_address_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.pod_address_.Get(i));
  }

  // string proxy_address = 1;
  if (!this->_internal_proxy_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_proxy_address());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddressPool::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AddressPool::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddressPool::GetClassData() const { return &_class_data_; }


void AddressPool::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AddressPool*>(&to_msg);
  auto& from = static_cast<const AddressPool&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AddressPool)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.pod_address_.MergeFrom(from._impl_.pod_address_);
  if (!from._internal_proxy_address().empty()) {
    _this->_internal_set_proxy_address(from._internal_proxy_address());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddressPool::CopyFrom(const AddressPool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AddressPool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddressPool::IsInitialized() const {
  return true;
}

void AddressPool::InternalSwap(AddressPool* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.pod_address_.InternalSwap(&other->_impl_.pod_address_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.proxy_address_, lhs_arena,
      &other->_impl_.proxy_address_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AddressPool::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ManagerRpcInterface_2eproto_getter, &descriptor_table_ManagerRpcInterface_2eproto_once,
      file_level_metadata_ManagerRpcInterface_2eproto[4]);
}

// ===================================================================

ManagerService::~ManagerService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* ManagerService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ManagerRpcInterface_2eproto);
  return file_level_service_descriptors_ManagerRpcInterface_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* ManagerService::GetDescriptor() {
  return descriptor();
}

void ManagerService::createService(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::ServiceInfo*,
                         ::JsonMessage*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method createService() not implemented.");
  done->Run();
}

void ManagerService::getServiceInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::ServiceName*,
                         ::JsonMessage*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getServiceInfo() not implemented.");
  done->Run();
}

void ManagerService::getAddressPool(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::ServiceName*,
                         ::AddressPool*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getAddressPool() not implemented.");
  done->Run();
}

void ManagerService::stopService(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::ServiceName*,
                         ::ServiceName*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method stopService() not implemented.");
  done->Run();
}

void ManagerService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_ManagerRpcInterface_2eproto[0]);
  switch(method->index()) {
    case 0:
      createService(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::ServiceInfo*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::JsonMessage*>(
                 response),
             done);
      break;
    case 1:
      getServiceInfo(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::ServiceName*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::JsonMessage*>(
                 response),
             done);
      break;
    case 2:
      getAddressPool(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::ServiceName*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::AddressPool*>(
                 response),
             done);
      break;
    case 3:
      stopService(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::ServiceName*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::ServiceName*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& ManagerService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::ServiceInfo::default_instance();
    case 1:
      return ::ServiceName::default_instance();
    case 2:
      return ::ServiceName::default_instance();
    case 3:
      return ::ServiceName::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& ManagerService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::JsonMessage::default_instance();
    case 1:
      return ::JsonMessage::default_instance();
    case 2:
      return ::AddressPool::default_instance();
    case 3:
      return ::ServiceName::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

ManagerService_Stub::ManagerService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
ManagerService_Stub::ManagerService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
ManagerService_Stub::~ManagerService_Stub() {
  if (owns_channel_) delete channel_;
}

void ManagerService_Stub::createService(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::ServiceInfo* request,
                              ::JsonMessage* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void ManagerService_Stub::getServiceInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::ServiceName* request,
                              ::JsonMessage* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void ManagerService_Stub::getAddressPool(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::ServiceName* request,
                              ::AddressPool* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void ManagerService_Stub::stopService(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::ServiceName* request,
                              ::ServiceName* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ServiceName*
Arena::CreateMaybeMessage< ::ServiceName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServiceName >(arena);
}
template<> PROTOBUF_NOINLINE ::ServiceParams*
Arena::CreateMaybeMessage< ::ServiceParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServiceParams >(arena);
}
template<> PROTOBUF_NOINLINE ::ServiceInfo*
Arena::CreateMaybeMessage< ::ServiceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServiceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::JsonMessage*
Arena::CreateMaybeMessage< ::JsonMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::JsonMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AddressPool*
Arena::CreateMaybeMessage< ::AddressPool >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AddressPool >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
