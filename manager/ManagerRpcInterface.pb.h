// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ManagerRpcInterface.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ManagerRpcInterface_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ManagerRpcInterface_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ManagerRpcInterface_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ManagerRpcInterface_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ManagerRpcInterface_2eproto;
class ServiceInformation;
struct ServiceInformationDefaultTypeInternal;
extern ServiceInformationDefaultTypeInternal _ServiceInformation_default_instance_;
class ServiceList;
struct ServiceListDefaultTypeInternal;
extern ServiceListDefaultTypeInternal _ServiceList_default_instance_;
class ServiceName;
struct ServiceNameDefaultTypeInternal;
extern ServiceNameDefaultTypeInternal _ServiceName_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ServiceInformation* Arena::CreateMaybeMessage<::ServiceInformation>(Arena*);
template<> ::ServiceList* Arena::CreateMaybeMessage<::ServiceList>(Arena*);
template<> ::ServiceName* Arena::CreateMaybeMessage<::ServiceName>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ServiceName final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServiceName) */ {
 public:
  inline ServiceName() : ServiceName(nullptr) {}
  ~ServiceName() override;
  explicit constexpr ServiceName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServiceName(const ServiceName& from);
  ServiceName(ServiceName&& from) noexcept
    : ServiceName() {
    *this = ::std::move(from);
  }

  inline ServiceName& operator=(const ServiceName& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceName& operator=(ServiceName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServiceName& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServiceName* internal_default_instance() {
    return reinterpret_cast<const ServiceName*>(
               &_ServiceName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ServiceName& a, ServiceName& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceName* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServiceName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServiceName>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServiceName& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ServiceName& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceName* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServiceName";
  }
  protected:
  explicit ServiceName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameOrAliasFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string name_or_alias = 1;
  void clear_name_or_alias();
  const std::string& name_or_alias() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name_or_alias(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name_or_alias();
  PROTOBUF_NODISCARD std::string* release_name_or_alias();
  void set_allocated_name_or_alias(std::string* name_or_alias);
  private:
  const std::string& _internal_name_or_alias() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name_or_alias(const std::string& value);
  std::string* _internal_mutable_name_or_alias();
  public:

  // int32 type = 2;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ServiceName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_or_alias_;
  int32_t type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ManagerRpcInterface_2eproto;
};
// -------------------------------------------------------------------

class ServiceInformation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServiceInformation) */ {
 public:
  inline ServiceInformation() : ServiceInformation(nullptr) {}
  ~ServiceInformation() override;
  explicit constexpr ServiceInformation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServiceInformation(const ServiceInformation& from);
  ServiceInformation(ServiceInformation&& from) noexcept
    : ServiceInformation() {
    *this = ::std::move(from);
  }

  inline ServiceInformation& operator=(const ServiceInformation& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceInformation& operator=(ServiceInformation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServiceInformation& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServiceInformation* internal_default_instance() {
    return reinterpret_cast<const ServiceInformation*>(
               &_ServiceInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ServiceInformation& a, ServiceInformation& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceInformation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceInformation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServiceInformation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServiceInformation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServiceInformation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ServiceInformation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceInformation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServiceInformation";
  }
  protected:
  explicit ServiceInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExeParamsFieldNumber = 4,
    kDockerParamsFieldNumber = 5,
    kServiceFieldNumber = 1,
    kAliasFieldNumber = 2,
    kTypeFieldNumber = 3,
    kRestartFieldNumber = 6,
  };
  // repeated string exe_params = 4;
  int exe_params_size() const;
  private:
  int _internal_exe_params_size() const;
  public:
  void clear_exe_params();
  const std::string& exe_params(int index) const;
  std::string* mutable_exe_params(int index);
  void set_exe_params(int index, const std::string& value);
  void set_exe_params(int index, std::string&& value);
  void set_exe_params(int index, const char* value);
  void set_exe_params(int index, const char* value, size_t size);
  std::string* add_exe_params();
  void add_exe_params(const std::string& value);
  void add_exe_params(std::string&& value);
  void add_exe_params(const char* value);
  void add_exe_params(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& exe_params() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_exe_params();
  private:
  const std::string& _internal_exe_params(int index) const;
  std::string* _internal_add_exe_params();
  public:

  // repeated string docker_params = 5;
  int docker_params_size() const;
  private:
  int _internal_docker_params_size() const;
  public:
  void clear_docker_params();
  const std::string& docker_params(int index) const;
  std::string* mutable_docker_params(int index);
  void set_docker_params(int index, const std::string& value);
  void set_docker_params(int index, std::string&& value);
  void set_docker_params(int index, const char* value);
  void set_docker_params(int index, const char* value, size_t size);
  std::string* add_docker_params();
  void add_docker_params(const std::string& value);
  void add_docker_params(std::string&& value);
  void add_docker_params(const char* value);
  void add_docker_params(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& docker_params() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_docker_params();
  private:
  const std::string& _internal_docker_params(int index) const;
  std::string* _internal_add_docker_params();
  public:

  // string service = 1;
  void clear_service();
  const std::string& service() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_service(ArgT0&& arg0, ArgT... args);
  std::string* mutable_service();
  PROTOBUF_NODISCARD std::string* release_service();
  void set_allocated_service(std::string* service);
  private:
  const std::string& _internal_service() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service(const std::string& value);
  std::string* _internal_mutable_service();
  public:

  // string alias = 2;
  void clear_alias();
  const std::string& alias() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_alias(ArgT0&& arg0, ArgT... args);
  std::string* mutable_alias();
  PROTOBUF_NODISCARD std::string* release_alias();
  void set_allocated_alias(std::string* alias);
  private:
  const std::string& _internal_alias() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alias(const std::string& value);
  std::string* _internal_mutable_alias();
  public:

  // int32 type = 3;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // int32 restart = 6;
  void clear_restart();
  int32_t restart() const;
  void set_restart(int32_t value);
  private:
  int32_t _internal_restart() const;
  void _internal_set_restart(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ServiceInformation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> exe_params_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> docker_params_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alias_;
  int32_t type_;
  int32_t restart_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ManagerRpcInterface_2eproto;
};
// -------------------------------------------------------------------

class ServiceList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServiceList) */ {
 public:
  inline ServiceList() : ServiceList(nullptr) {}
  ~ServiceList() override;
  explicit constexpr ServiceList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServiceList(const ServiceList& from);
  ServiceList(ServiceList&& from) noexcept
    : ServiceList() {
    *this = ::std::move(from);
  }

  inline ServiceList& operator=(const ServiceList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceList& operator=(ServiceList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServiceList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServiceList* internal_default_instance() {
    return reinterpret_cast<const ServiceList*>(
               &_ServiceList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ServiceList& a, ServiceList& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServiceList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServiceList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServiceList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ServiceList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServiceList";
  }
  protected:
  explicit ServiceList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServicesFieldNumber = 1,
  };
  // repeated .ServiceInformation services = 1;
  int services_size() const;
  private:
  int _internal_services_size() const;
  public:
  void clear_services();
  ::ServiceInformation* mutable_services(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServiceInformation >*
      mutable_services();
  private:
  const ::ServiceInformation& _internal_services(int index) const;
  ::ServiceInformation* _internal_add_services();
  public:
  const ::ServiceInformation& services(int index) const;
  ::ServiceInformation* add_services();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServiceInformation >&
      services() const;

  // @@protoc_insertion_point(class_scope:ServiceList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServiceInformation > services_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ManagerRpcInterface_2eproto;
};
// ===================================================================

class ManagerService_Stub;

class ManagerService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline ManagerService() {};
 public:
  virtual ~ManagerService();

  typedef ManagerService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void showServices(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ServiceName* request,
                       ::ServiceList* response,
                       ::google::protobuf::Closure* done);
  virtual void createService(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ServiceInformation* request,
                       ::ServiceName* response,
                       ::google::protobuf::Closure* done);
  virtual void stopService(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ServiceName* request,
                       ::ServiceName* response,
                       ::google::protobuf::Closure* done);
  virtual void transferService(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ServiceName* request,
                       ::ServiceName* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ManagerService);
};

class ManagerService_Stub : public ManagerService {
 public:
  ManagerService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  ManagerService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~ManagerService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements ManagerService ------------------------------------------

  void showServices(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ServiceName* request,
                       ::ServiceList* response,
                       ::google::protobuf::Closure* done);
  void createService(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ServiceInformation* request,
                       ::ServiceName* response,
                       ::google::protobuf::Closure* done);
  void stopService(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ServiceName* request,
                       ::ServiceName* response,
                       ::google::protobuf::Closure* done);
  void transferService(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ServiceName* request,
                       ::ServiceName* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ManagerService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServiceName

// string name_or_alias = 1;
inline void ServiceName::clear_name_or_alias() {
  name_or_alias_.ClearToEmpty();
}
inline const std::string& ServiceName::name_or_alias() const {
  // @@protoc_insertion_point(field_get:ServiceName.name_or_alias)
  return _internal_name_or_alias();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServiceName::set_name_or_alias(ArgT0&& arg0, ArgT... args) {
 
 name_or_alias_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ServiceName.name_or_alias)
}
inline std::string* ServiceName::mutable_name_or_alias() {
  std::string* _s = _internal_mutable_name_or_alias();
  // @@protoc_insertion_point(field_mutable:ServiceName.name_or_alias)
  return _s;
}
inline const std::string& ServiceName::_internal_name_or_alias() const {
  return name_or_alias_.Get();
}
inline void ServiceName::_internal_set_name_or_alias(const std::string& value) {
  
  name_or_alias_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ServiceName::_internal_mutable_name_or_alias() {
  
  return name_or_alias_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ServiceName::release_name_or_alias() {
  // @@protoc_insertion_point(field_release:ServiceName.name_or_alias)
  return name_or_alias_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ServiceName::set_allocated_name_or_alias(std::string* name_or_alias) {
  if (name_or_alias != nullptr) {
    
  } else {
    
  }
  name_or_alias_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name_or_alias,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_or_alias_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_or_alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ServiceName.name_or_alias)
}

// int32 type = 2;
inline void ServiceName::clear_type() {
  type_ = 0;
}
inline int32_t ServiceName::_internal_type() const {
  return type_;
}
inline int32_t ServiceName::type() const {
  // @@protoc_insertion_point(field_get:ServiceName.type)
  return _internal_type();
}
inline void ServiceName::_internal_set_type(int32_t value) {
  
  type_ = value;
}
inline void ServiceName::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ServiceName.type)
}

// -------------------------------------------------------------------

// ServiceInformation

// string service = 1;
inline void ServiceInformation::clear_service() {
  service_.ClearToEmpty();
}
inline const std::string& ServiceInformation::service() const {
  // @@protoc_insertion_point(field_get:ServiceInformation.service)
  return _internal_service();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServiceInformation::set_service(ArgT0&& arg0, ArgT... args) {
 
 service_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ServiceInformation.service)
}
inline std::string* ServiceInformation::mutable_service() {
  std::string* _s = _internal_mutable_service();
  // @@protoc_insertion_point(field_mutable:ServiceInformation.service)
  return _s;
}
inline const std::string& ServiceInformation::_internal_service() const {
  return service_.Get();
}
inline void ServiceInformation::_internal_set_service(const std::string& value) {
  
  service_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ServiceInformation::_internal_mutable_service() {
  
  return service_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ServiceInformation::release_service() {
  // @@protoc_insertion_point(field_release:ServiceInformation.service)
  return service_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ServiceInformation::set_allocated_service(std::string* service) {
  if (service != nullptr) {
    
  } else {
    
  }
  service_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (service_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    service_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ServiceInformation.service)
}

// string alias = 2;
inline void ServiceInformation::clear_alias() {
  alias_.ClearToEmpty();
}
inline const std::string& ServiceInformation::alias() const {
  // @@protoc_insertion_point(field_get:ServiceInformation.alias)
  return _internal_alias();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServiceInformation::set_alias(ArgT0&& arg0, ArgT... args) {
 
 alias_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ServiceInformation.alias)
}
inline std::string* ServiceInformation::mutable_alias() {
  std::string* _s = _internal_mutable_alias();
  // @@protoc_insertion_point(field_mutable:ServiceInformation.alias)
  return _s;
}
inline const std::string& ServiceInformation::_internal_alias() const {
  return alias_.Get();
}
inline void ServiceInformation::_internal_set_alias(const std::string& value) {
  
  alias_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ServiceInformation::_internal_mutable_alias() {
  
  return alias_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ServiceInformation::release_alias() {
  // @@protoc_insertion_point(field_release:ServiceInformation.alias)
  return alias_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ServiceInformation::set_allocated_alias(std::string* alias) {
  if (alias != nullptr) {
    
  } else {
    
  }
  alias_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alias,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (alias_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ServiceInformation.alias)
}

// int32 type = 3;
inline void ServiceInformation::clear_type() {
  type_ = 0;
}
inline int32_t ServiceInformation::_internal_type() const {
  return type_;
}
inline int32_t ServiceInformation::type() const {
  // @@protoc_insertion_point(field_get:ServiceInformation.type)
  return _internal_type();
}
inline void ServiceInformation::_internal_set_type(int32_t value) {
  
  type_ = value;
}
inline void ServiceInformation::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ServiceInformation.type)
}

// repeated string exe_params = 4;
inline int ServiceInformation::_internal_exe_params_size() const {
  return exe_params_.size();
}
inline int ServiceInformation::exe_params_size() const {
  return _internal_exe_params_size();
}
inline void ServiceInformation::clear_exe_params() {
  exe_params_.Clear();
}
inline std::string* ServiceInformation::add_exe_params() {
  std::string* _s = _internal_add_exe_params();
  // @@protoc_insertion_point(field_add_mutable:ServiceInformation.exe_params)
  return _s;
}
inline const std::string& ServiceInformation::_internal_exe_params(int index) const {
  return exe_params_.Get(index);
}
inline const std::string& ServiceInformation::exe_params(int index) const {
  // @@protoc_insertion_point(field_get:ServiceInformation.exe_params)
  return _internal_exe_params(index);
}
inline std::string* ServiceInformation::mutable_exe_params(int index) {
  // @@protoc_insertion_point(field_mutable:ServiceInformation.exe_params)
  return exe_params_.Mutable(index);
}
inline void ServiceInformation::set_exe_params(int index, const std::string& value) {
  exe_params_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ServiceInformation.exe_params)
}
inline void ServiceInformation::set_exe_params(int index, std::string&& value) {
  exe_params_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ServiceInformation.exe_params)
}
inline void ServiceInformation::set_exe_params(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  exe_params_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ServiceInformation.exe_params)
}
inline void ServiceInformation::set_exe_params(int index, const char* value, size_t size) {
  exe_params_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ServiceInformation.exe_params)
}
inline std::string* ServiceInformation::_internal_add_exe_params() {
  return exe_params_.Add();
}
inline void ServiceInformation::add_exe_params(const std::string& value) {
  exe_params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ServiceInformation.exe_params)
}
inline void ServiceInformation::add_exe_params(std::string&& value) {
  exe_params_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ServiceInformation.exe_params)
}
inline void ServiceInformation::add_exe_params(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  exe_params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ServiceInformation.exe_params)
}
inline void ServiceInformation::add_exe_params(const char* value, size_t size) {
  exe_params_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ServiceInformation.exe_params)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ServiceInformation::exe_params() const {
  // @@protoc_insertion_point(field_list:ServiceInformation.exe_params)
  return exe_params_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ServiceInformation::mutable_exe_params() {
  // @@protoc_insertion_point(field_mutable_list:ServiceInformation.exe_params)
  return &exe_params_;
}

// repeated string docker_params = 5;
inline int ServiceInformation::_internal_docker_params_size() const {
  return docker_params_.size();
}
inline int ServiceInformation::docker_params_size() const {
  return _internal_docker_params_size();
}
inline void ServiceInformation::clear_docker_params() {
  docker_params_.Clear();
}
inline std::string* ServiceInformation::add_docker_params() {
  std::string* _s = _internal_add_docker_params();
  // @@protoc_insertion_point(field_add_mutable:ServiceInformation.docker_params)
  return _s;
}
inline const std::string& ServiceInformation::_internal_docker_params(int index) const {
  return docker_params_.Get(index);
}
inline const std::string& ServiceInformation::docker_params(int index) const {
  // @@protoc_insertion_point(field_get:ServiceInformation.docker_params)
  return _internal_docker_params(index);
}
inline std::string* ServiceInformation::mutable_docker_params(int index) {
  // @@protoc_insertion_point(field_mutable:ServiceInformation.docker_params)
  return docker_params_.Mutable(index);
}
inline void ServiceInformation::set_docker_params(int index, const std::string& value) {
  docker_params_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ServiceInformation.docker_params)
}
inline void ServiceInformation::set_docker_params(int index, std::string&& value) {
  docker_params_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ServiceInformation.docker_params)
}
inline void ServiceInformation::set_docker_params(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  docker_params_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ServiceInformation.docker_params)
}
inline void ServiceInformation::set_docker_params(int index, const char* value, size_t size) {
  docker_params_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ServiceInformation.docker_params)
}
inline std::string* ServiceInformation::_internal_add_docker_params() {
  return docker_params_.Add();
}
inline void ServiceInformation::add_docker_params(const std::string& value) {
  docker_params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ServiceInformation.docker_params)
}
inline void ServiceInformation::add_docker_params(std::string&& value) {
  docker_params_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ServiceInformation.docker_params)
}
inline void ServiceInformation::add_docker_params(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  docker_params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ServiceInformation.docker_params)
}
inline void ServiceInformation::add_docker_params(const char* value, size_t size) {
  docker_params_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ServiceInformation.docker_params)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ServiceInformation::docker_params() const {
  // @@protoc_insertion_point(field_list:ServiceInformation.docker_params)
  return docker_params_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ServiceInformation::mutable_docker_params() {
  // @@protoc_insertion_point(field_mutable_list:ServiceInformation.docker_params)
  return &docker_params_;
}

// int32 restart = 6;
inline void ServiceInformation::clear_restart() {
  restart_ = 0;
}
inline int32_t ServiceInformation::_internal_restart() const {
  return restart_;
}
inline int32_t ServiceInformation::restart() const {
  // @@protoc_insertion_point(field_get:ServiceInformation.restart)
  return _internal_restart();
}
inline void ServiceInformation::_internal_set_restart(int32_t value) {
  
  restart_ = value;
}
inline void ServiceInformation::set_restart(int32_t value) {
  _internal_set_restart(value);
  // @@protoc_insertion_point(field_set:ServiceInformation.restart)
}

// -------------------------------------------------------------------

// ServiceList

// repeated .ServiceInformation services = 1;
inline int ServiceList::_internal_services_size() const {
  return services_.size();
}
inline int ServiceList::services_size() const {
  return _internal_services_size();
}
inline void ServiceList::clear_services() {
  services_.Clear();
}
inline ::ServiceInformation* ServiceList::mutable_services(int index) {
  // @@protoc_insertion_point(field_mutable:ServiceList.services)
  return services_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServiceInformation >*
ServiceList::mutable_services() {
  // @@protoc_insertion_point(field_mutable_list:ServiceList.services)
  return &services_;
}
inline const ::ServiceInformation& ServiceList::_internal_services(int index) const {
  return services_.Get(index);
}
inline const ::ServiceInformation& ServiceList::services(int index) const {
  // @@protoc_insertion_point(field_get:ServiceList.services)
  return _internal_services(index);
}
inline ::ServiceInformation* ServiceList::_internal_add_services() {
  return services_.Add();
}
inline ::ServiceInformation* ServiceList::add_services() {
  ::ServiceInformation* _add = _internal_add_services();
  // @@protoc_insertion_point(field_add:ServiceList.services)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServiceInformation >&
ServiceList::services() const {
  // @@protoc_insertion_point(field_list:ServiceList.services)
  return services_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ManagerRpcInterface_2eproto
