// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: YoloInfer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_YoloInfer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_YoloInfer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_YoloInfer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_YoloInfer_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_YoloInfer_2eproto;
class MongoImageOidRange;
struct MongoImageOidRangeDefaultTypeInternal;
extern MongoImageOidRangeDefaultTypeInternal _MongoImageOidRange_default_instance_;
class YoloTestResult;
struct YoloTestResultDefaultTypeInternal;
extern YoloTestResultDefaultTypeInternal _YoloTestResult_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::MongoImageOidRange* Arena::CreateMaybeMessage<::MongoImageOidRange>(Arena*);
template<> ::YoloTestResult* Arena::CreateMaybeMessage<::YoloTestResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class MongoImageOidRange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MongoImageOidRange) */ {
 public:
  inline MongoImageOidRange() : MongoImageOidRange(nullptr) {}
  ~MongoImageOidRange() override;
  explicit constexpr MongoImageOidRange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MongoImageOidRange(const MongoImageOidRange& from);
  MongoImageOidRange(MongoImageOidRange&& from) noexcept
    : MongoImageOidRange() {
    *this = ::std::move(from);
  }

  inline MongoImageOidRange& operator=(const MongoImageOidRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline MongoImageOidRange& operator=(MongoImageOidRange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MongoImageOidRange& default_instance() {
    return *internal_default_instance();
  }
  static inline const MongoImageOidRange* internal_default_instance() {
    return reinterpret_cast<const MongoImageOidRange*>(
               &_MongoImageOidRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MongoImageOidRange& a, MongoImageOidRange& b) {
    a.Swap(&b);
  }
  inline void Swap(MongoImageOidRange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MongoImageOidRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MongoImageOidRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MongoImageOidRange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MongoImageOidRange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MongoImageOidRange& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MongoImageOidRange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MongoImageOidRange";
  }
  protected:
  explicit MongoImageOidRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinOidFieldNumber = 1,
    kMaxOidFieldNumber = 2,
  };
  // string min_oid = 1;
  void clear_min_oid();
  const std::string& min_oid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_min_oid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_min_oid();
  PROTOBUF_NODISCARD std::string* release_min_oid();
  void set_allocated_min_oid(std::string* min_oid);
  private:
  const std::string& _internal_min_oid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_min_oid(const std::string& value);
  std::string* _internal_mutable_min_oid();
  public:

  // string max_oid = 2;
  void clear_max_oid();
  const std::string& max_oid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_max_oid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_max_oid();
  PROTOBUF_NODISCARD std::string* release_max_oid();
  void set_allocated_max_oid(std::string* max_oid);
  private:
  const std::string& _internal_max_oid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_max_oid(const std::string& value);
  std::string* _internal_mutable_max_oid();
  public:

  // @@protoc_insertion_point(class_scope:MongoImageOidRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr min_oid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr max_oid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_YoloInfer_2eproto;
};
// -------------------------------------------------------------------

class YoloTestResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:YoloTestResult) */ {
 public:
  inline YoloTestResult() : YoloTestResult(nullptr) {}
  ~YoloTestResult() override;
  explicit constexpr YoloTestResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  YoloTestResult(const YoloTestResult& from);
  YoloTestResult(YoloTestResult&& from) noexcept
    : YoloTestResult() {
    *this = ::std::move(from);
  }

  inline YoloTestResult& operator=(const YoloTestResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline YoloTestResult& operator=(YoloTestResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const YoloTestResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const YoloTestResult* internal_default_instance() {
    return reinterpret_cast<const YoloTestResult*>(
               &_YoloTestResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(YoloTestResult& a, YoloTestResult& b) {
    a.Swap(&b);
  }
  inline void Swap(YoloTestResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(YoloTestResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  YoloTestResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<YoloTestResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const YoloTestResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const YoloTestResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(YoloTestResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "YoloTestResult";
  }
  protected:
  explicit YoloTestResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccuracyFieldNumber = 1,
    kPrecisionFieldNumber = 2,
    kRecallFieldNumber = 3,
    kAPFieldNumber = 4,
    kIoUFieldNumber = 5,
  };
  // int32 accuracy = 1;
  void clear_accuracy();
  int32_t accuracy() const;
  void set_accuracy(int32_t value);
  private:
  int32_t _internal_accuracy() const;
  void _internal_set_accuracy(int32_t value);
  public:

  // int32 precision = 2;
  void clear_precision();
  int32_t precision() const;
  void set_precision(int32_t value);
  private:
  int32_t _internal_precision() const;
  void _internal_set_precision(int32_t value);
  public:

  // int32 recall = 3;
  void clear_recall();
  int32_t recall() const;
  void set_recall(int32_t value);
  private:
  int32_t _internal_recall() const;
  void _internal_set_recall(int32_t value);
  public:

  // int32 AP = 4;
  void clear_ap();
  int32_t ap() const;
  void set_ap(int32_t value);
  private:
  int32_t _internal_ap() const;
  void _internal_set_ap(int32_t value);
  public:

  // int32 IoU = 5;
  void clear_iou();
  int32_t iou() const;
  void set_iou(int32_t value);
  private:
  int32_t _internal_iou() const;
  void _internal_set_iou(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:YoloTestResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t accuracy_;
  int32_t precision_;
  int32_t recall_;
  int32_t ap_;
  int32_t iou_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_YoloInfer_2eproto;
};
// ===================================================================

class YoloTest_Stub;

class YoloTest : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline YoloTest() {};
 public:
  virtual ~YoloTest();

  typedef YoloTest_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void testWithRoadSeg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::MongoImageOidRange* request,
                       ::YoloTestResult* response,
                       ::google::protobuf::Closure* done);
  virtual void testWithoutRoadSeg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::MongoImageOidRange* request,
                       ::YoloTestResult* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(YoloTest);
};

class YoloTest_Stub : public YoloTest {
 public:
  YoloTest_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  YoloTest_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~YoloTest_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements YoloTest ------------------------------------------

  void testWithRoadSeg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::MongoImageOidRange* request,
                       ::YoloTestResult* response,
                       ::google::protobuf::Closure* done);
  void testWithoutRoadSeg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::MongoImageOidRange* request,
                       ::YoloTestResult* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(YoloTest_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MongoImageOidRange

// string min_oid = 1;
inline void MongoImageOidRange::clear_min_oid() {
  min_oid_.ClearToEmpty();
}
inline const std::string& MongoImageOidRange::min_oid() const {
  // @@protoc_insertion_point(field_get:MongoImageOidRange.min_oid)
  return _internal_min_oid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MongoImageOidRange::set_min_oid(ArgT0&& arg0, ArgT... args) {
 
 min_oid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MongoImageOidRange.min_oid)
}
inline std::string* MongoImageOidRange::mutable_min_oid() {
  std::string* _s = _internal_mutable_min_oid();
  // @@protoc_insertion_point(field_mutable:MongoImageOidRange.min_oid)
  return _s;
}
inline const std::string& MongoImageOidRange::_internal_min_oid() const {
  return min_oid_.Get();
}
inline void MongoImageOidRange::_internal_set_min_oid(const std::string& value) {
  
  min_oid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MongoImageOidRange::_internal_mutable_min_oid() {
  
  return min_oid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MongoImageOidRange::release_min_oid() {
  // @@protoc_insertion_point(field_release:MongoImageOidRange.min_oid)
  return min_oid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MongoImageOidRange::set_allocated_min_oid(std::string* min_oid) {
  if (min_oid != nullptr) {
    
  } else {
    
  }
  min_oid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), min_oid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (min_oid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    min_oid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MongoImageOidRange.min_oid)
}

// string max_oid = 2;
inline void MongoImageOidRange::clear_max_oid() {
  max_oid_.ClearToEmpty();
}
inline const std::string& MongoImageOidRange::max_oid() const {
  // @@protoc_insertion_point(field_get:MongoImageOidRange.max_oid)
  return _internal_max_oid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MongoImageOidRange::set_max_oid(ArgT0&& arg0, ArgT... args) {
 
 max_oid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MongoImageOidRange.max_oid)
}
inline std::string* MongoImageOidRange::mutable_max_oid() {
  std::string* _s = _internal_mutable_max_oid();
  // @@protoc_insertion_point(field_mutable:MongoImageOidRange.max_oid)
  return _s;
}
inline const std::string& MongoImageOidRange::_internal_max_oid() const {
  return max_oid_.Get();
}
inline void MongoImageOidRange::_internal_set_max_oid(const std::string& value) {
  
  max_oid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MongoImageOidRange::_internal_mutable_max_oid() {
  
  return max_oid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MongoImageOidRange::release_max_oid() {
  // @@protoc_insertion_point(field_release:MongoImageOidRange.max_oid)
  return max_oid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MongoImageOidRange::set_allocated_max_oid(std::string* max_oid) {
  if (max_oid != nullptr) {
    
  } else {
    
  }
  max_oid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), max_oid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (max_oid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    max_oid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MongoImageOidRange.max_oid)
}

// -------------------------------------------------------------------

// YoloTestResult

// int32 accuracy = 1;
inline void YoloTestResult::clear_accuracy() {
  accuracy_ = 0;
}
inline int32_t YoloTestResult::_internal_accuracy() const {
  return accuracy_;
}
inline int32_t YoloTestResult::accuracy() const {
  // @@protoc_insertion_point(field_get:YoloTestResult.accuracy)
  return _internal_accuracy();
}
inline void YoloTestResult::_internal_set_accuracy(int32_t value) {
  
  accuracy_ = value;
}
inline void YoloTestResult::set_accuracy(int32_t value) {
  _internal_set_accuracy(value);
  // @@protoc_insertion_point(field_set:YoloTestResult.accuracy)
}

// int32 precision = 2;
inline void YoloTestResult::clear_precision() {
  precision_ = 0;
}
inline int32_t YoloTestResult::_internal_precision() const {
  return precision_;
}
inline int32_t YoloTestResult::precision() const {
  // @@protoc_insertion_point(field_get:YoloTestResult.precision)
  return _internal_precision();
}
inline void YoloTestResult::_internal_set_precision(int32_t value) {
  
  precision_ = value;
}
inline void YoloTestResult::set_precision(int32_t value) {
  _internal_set_precision(value);
  // @@protoc_insertion_point(field_set:YoloTestResult.precision)
}

// int32 recall = 3;
inline void YoloTestResult::clear_recall() {
  recall_ = 0;
}
inline int32_t YoloTestResult::_internal_recall() const {
  return recall_;
}
inline int32_t YoloTestResult::recall() const {
  // @@protoc_insertion_point(field_get:YoloTestResult.recall)
  return _internal_recall();
}
inline void YoloTestResult::_internal_set_recall(int32_t value) {
  
  recall_ = value;
}
inline void YoloTestResult::set_recall(int32_t value) {
  _internal_set_recall(value);
  // @@protoc_insertion_point(field_set:YoloTestResult.recall)
}

// int32 AP = 4;
inline void YoloTestResult::clear_ap() {
  ap_ = 0;
}
inline int32_t YoloTestResult::_internal_ap() const {
  return ap_;
}
inline int32_t YoloTestResult::ap() const {
  // @@protoc_insertion_point(field_get:YoloTestResult.AP)
  return _internal_ap();
}
inline void YoloTestResult::_internal_set_ap(int32_t value) {
  
  ap_ = value;
}
inline void YoloTestResult::set_ap(int32_t value) {
  _internal_set_ap(value);
  // @@protoc_insertion_point(field_set:YoloTestResult.AP)
}

// int32 IoU = 5;
inline void YoloTestResult::clear_iou() {
  iou_ = 0;
}
inline int32_t YoloTestResult::_internal_iou() const {
  return iou_;
}
inline int32_t YoloTestResult::iou() const {
  // @@protoc_insertion_point(field_get:YoloTestResult.IoU)
  return _internal_iou();
}
inline void YoloTestResult::_internal_set_iou(int32_t value) {
  
  iou_ = value;
}
inline void YoloTestResult::set_iou(int32_t value) {
  _internal_set_iou(value);
  // @@protoc_insertion_point(field_set:YoloTestResult.IoU)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_YoloInfer_2eproto
